{"version":3,"file":"api.js","sources":["common/api.ts"],"sourcesContent":["import { isMockMode, resolveApiBaseUrl } from '@/utils/env';\r\nimport {\r\n  clearAuthorToken,\r\n  clearPlatformToken,\r\n  clearToken,\r\n  getAuthorToken,\r\n  getPlatformToken,\r\n  getSelectedSoftwareName,\r\n  getTokenValue\r\n} from '@/utils/storage';\r\n\r\ninterface ApiEnvelope<T> {\r\n  code: number;\r\n  message: string;\r\n  data: T;\r\n}\r\n\r\ninterface RequestOptions<T> {\r\n  url: string;\r\n  method?: UniApp.RequestOptions['method'];\r\n  data?: Record<string, unknown>;\r\n  mockData?: T;\r\n  headers?: Record<string, string>;\r\n  auth?: boolean;\r\n  disableMock?: boolean;\r\n  authRole?: 'agent' | 'author';\r\n  skipProxy?: boolean;\r\n}\r\n\r\nlet baseURL = resolveApiBaseUrl();\r\nlet mockEnabled = isMockMode(baseURL);\r\n\r\nfunction resolveUrl(rawUrl: string, skipProxy: boolean): { url: string; proxied: boolean } {\r\n  if (!rawUrl.startsWith('/')) {\r\n    return { url: rawUrl, proxied: false };\r\n  }\r\n\r\n  if (skipProxy) {\r\n    return { url: rawUrl, proxied: false };\r\n  }\r\n\r\n  if (\r\n    rawUrl.startsWith('/api/agents') ||\r\n    rawUrl.startsWith('/api/authors') ||\r\n    rawUrl.startsWith('/api/bindings') ||\r\n    rawUrl.startsWith('/api/proxy') ||\r\n    rawUrl.startsWith('/api/wechat')\r\n  ) {\r\n    return { url: rawUrl, proxied: rawUrl.startsWith('/api/proxy') };\r\n  }\r\n\r\n  const software = getSelectedSoftwareName();\r\n  if (!software) {\r\n    throw new Error('未选择软件码，无法发起代理请求');\r\n  }\r\n\r\n  const normalized = rawUrl.replace(/^\\//, '');\r\n  return { url: `/api/proxy/${encodeURIComponent(software)}/${normalized}`, proxied: true };\r\n}\r\n\r\nexport async function apiRequest<T>(options: RequestOptions<T>): Promise<T> {\r\n  const allowMock = !options.disableMock && mockEnabled && options.mockData;\r\n\r\n  if (allowMock) {\r\n    return Promise.resolve(options.mockData);\r\n  }\r\n\r\n  let requestUrl: string;\r\n  let proxied = false;\r\n  try {\r\n    const resolved = resolveUrl(options.url, options.skipProxy ?? false);\r\n    requestUrl = resolved.url;\r\n    proxied = resolved.proxied;\r\n  } catch (error) {\r\n    return Promise.reject(error);\r\n  }\r\n\r\n  function isApiEnvelope(payload: any): payload is ApiEnvelope<unknown> {\r\n    return (\r\n      payload &&\r\n      typeof payload === 'object' &&\r\n      'code' in payload &&\r\n      typeof payload.code === 'number' &&\r\n      'message' in payload\r\n    );\r\n  }\r\n\r\n  return new Promise<T>((resolve, reject) => {\r\n    const headers: Record<string, string> = {\r\n      'Content-Type': 'application/json',\r\n      ...(options.headers ?? {})\r\n    };\r\n\r\n    const shouldAuth = options.auth ?? proxied;\r\n    if (shouldAuth) {\r\n      const role = options.authRole || (options.url.startsWith('/api/authors') ? 'author' : 'agent');\r\n      const token = role === 'author' ? getAuthorToken() : getPlatformToken();\r\n      if (token) {\r\n        headers.Authorization = `Bearer ${token}`;\r\n      }\r\n    }\r\n\r\n    if (proxied) {\r\n      const remoteToken = getTokenValue();\r\n      if (remoteToken) {\r\n        headers['X-SProtect-Remote-Token'] = remoteToken;\r\n      }\r\n    }\r\n\r\n    const isAbsoluteUrl = /^[a-z][a-z0-9+.-]*:\\/\\//i.test(requestUrl);\r\n    const finalUrl = isAbsoluteUrl ? requestUrl : `${baseURL}${requestUrl}`;\r\n\r\n    uni.request({\r\n      url: finalUrl,\r\n      method: options.method ?? 'GET',\r\n      data: options.data,\r\n      header: headers,\r\n      success: (res) => {\r\n        if (res.statusCode && res.statusCode >= 200 && res.statusCode < 300) {\r\n          const payload = res.data as unknown;\r\n\r\n          if (isApiEnvelope(payload)) {\r\n            if (payload.code === 0) {\r\n              resolve(payload.data as T);\r\n              return;\r\n            }\r\n\r\n            if (allowMock) {\r\n              resolve(options.mockData as T);\r\n              return;\r\n            }\r\n\r\n            const error = new Error(payload.message || '请求失败');\r\n            (error as any).code = payload.code;\r\n            (error as any).response = payload;\r\n            reject(error);\r\n            return;\r\n          }\r\n\r\n          resolve(payload as T);\r\n          return;\r\n        }\r\n\r\n        if (res.statusCode === 401) {\r\n          if (options.authRole === 'author' || options.url.startsWith('/api/authors')) {\r\n            clearAuthorToken();\r\n          } else {\r\n            clearPlatformToken();\r\n          }\r\n          clearToken();\r\n          uni.$emit('app:unauthorized', { message: '登录已过期，请重新登录' });\r\n        }\r\n\r\n        if (allowMock) {\r\n          resolve(options.mockData as T);\r\n          return;\r\n        }\r\n\r\n        reject(res);\r\n      },\r\n      fail: (err) => {\r\n        if (allowMock) {\r\n          resolve(options.mockData as T);\r\n        } else {\r\n          reject(err);\r\n        }\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nexport function getBaseURL() {\r\n  return baseURL;\r\n}\r\n\r\nexport function refreshBaseURL() {\r\n  baseURL = resolveApiBaseUrl();\r\n  mockEnabled = isMockMode(baseURL);\r\n  return baseURL;\r\n}\r\n\r\nexport function setBaseURL(url: string) {\r\n  baseURL = url;\r\n  mockEnabled = isMockMode(baseURL);\r\n}\r\n"],"names":["resolveApiBaseUrl","isMockMode","getSelectedSoftwareName","getAuthorToken","getPlatformToken","getTokenValue","uni","clearAuthorToken","clearPlatformToken","clearToken"],"mappings":";;;;AA6BA,IAAI,UAAUA,UAAkB,kBAAA;AAChC,IAAI,cAAcC,UAAAA,WAAW,OAAO;AAEpC,SAAS,WAAW,QAAgB,WAAuD;AACzF,MAAI,CAAC,OAAO,WAAW,GAAG,GAAG;AAC3B,WAAO,EAAE,KAAK,QAAQ,SAAS,MAAM;AAAA,EACvC;AAEA,MAAI,WAAW;AACb,WAAO,EAAE,KAAK,QAAQ,SAAS,MAAM;AAAA,EACvC;AAEA,MACE,OAAO,WAAW,aAAa,KAC/B,OAAO,WAAW,cAAc,KAChC,OAAO,WAAW,eAAe,KACjC,OAAO,WAAW,YAAY,KAC9B,OAAO,WAAW,aAAa,GAC/B;AACA,WAAO,EAAE,KAAK,QAAQ,SAAS,OAAO,WAAW,YAAY;EAC/D;AAEA,QAAM,WAAWC,cAAAA;AACjB,MAAI,CAAC,UAAU;AACP,UAAA,IAAI,MAAM,iBAAiB;AAAA,EACnC;AAEA,QAAM,aAAa,OAAO,QAAQ,OAAO,EAAE;AACpC,SAAA,EAAE,KAAK,cAAc,mBAAmB,QAAQ,CAAC,IAAI,UAAU,IAAI,SAAS,KAAK;AAC1F;AAEA,eAAsB,WAAc,SAAwC;AAC1E,QAAM,YAAY,CAAC,QAAQ,eAAe,eAAe,QAAQ;AAEjE,MAAI,WAAW;AACN,WAAA,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,EACzC;AAEI,MAAA;AACJ,MAAI,UAAU;AACV,MAAA;AACF,UAAM,WAAW,WAAW,QAAQ,KAAK,QAAQ,aAAa,KAAK;AACnE,iBAAa,SAAS;AACtB,cAAU,SAAS;AAAA,WACZ,OAAO;AACP,WAAA,QAAQ,OAAO,KAAK;AAAA,EAC7B;AAEA,WAAS,cAAc,SAA+C;AAElE,WAAA,WACA,OAAO,YAAY,YACnB,UAAU,WACV,OAAO,QAAQ,SAAS,YACxB,aAAa;AAAA,EAEjB;AAEA,SAAO,IAAI,QAAW,CAAC,SAAS,WAAW;AACzC,UAAM,UAAkC;AAAA,MACtC,gBAAgB;AAAA,MAChB,GAAI,QAAQ,WAAW,CAAC;AAAA,IAAA;AAGpB,UAAA,aAAa,QAAQ,QAAQ;AACnC,QAAI,YAAY;AACR,YAAA,OAAO,QAAQ,aAAa,QAAQ,IAAI,WAAW,cAAc,IAAI,WAAW;AACtF,YAAM,QAAQ,SAAS,WAAWC,cAAAA,mBAAmBC,cAAiB,iBAAA;AACtE,UAAI,OAAO;AACD,gBAAA,gBAAgB,UAAU,KAAK;AAAA,MACzC;AAAA,IACF;AAEA,QAAI,SAAS;AACX,YAAM,cAAcC,cAAAA;AACpB,UAAI,aAAa;AACf,gBAAQ,yBAAyB,IAAI;AAAA,MACvC;AAAA,IACF;AAEM,UAAA,gBAAgB,2BAA2B,KAAK,UAAU;AAChE,UAAM,WAAW,gBAAgB,aAAa,GAAG,OAAO,GAAG,UAAU;AAErEC,kBAAAA,MAAI,QAAQ;AAAA,MACV,KAAK;AAAA,MACL,QAAQ,QAAQ,UAAU;AAAA,MAC1B,MAAM,QAAQ;AAAA,MACd,QAAQ;AAAA,MACR,SAAS,CAAC,QAAQ;AAChB,YAAI,IAAI,cAAc,IAAI,cAAc,OAAO,IAAI,aAAa,KAAK;AACnE,gBAAM,UAAU,IAAI;AAEhB,cAAA,cAAc,OAAO,GAAG;AACtB,gBAAA,QAAQ,SAAS,GAAG;AACtB,sBAAQ,QAAQ,IAAS;AACzB;AAAA,YACF;AAEA,gBAAI,WAAW;AACb,sBAAQ,QAAQ,QAAa;AAC7B;AAAA,YACF;AAEA,kBAAM,QAAQ,IAAI,MAAM,QAAQ,WAAW,MAAM;AAChD,kBAAc,OAAO,QAAQ;AAC7B,kBAAc,WAAW;AAC1B,mBAAO,KAAK;AACZ;AAAA,UACF;AAEA,kBAAQ,OAAY;AACpB;AAAA,QACF;AAEI,YAAA,IAAI,eAAe,KAAK;AAC1B,cAAI,QAAQ,aAAa,YAAY,QAAQ,IAAI,WAAW,cAAc,GAAG;AAC1DC,0BAAAA;UAAA,OACZ;AACcC,0BAAAA;UACrB;AACWC,wBAAAA;AACXH,wBAAA,MAAI,MAAM,oBAAoB,EAAE,SAAS,cAAe,CAAA;AAAA,QAC1D;AAEA,YAAI,WAAW;AACb,kBAAQ,QAAQ,QAAa;AAC7B;AAAA,QACF;AAEA,eAAO,GAAG;AAAA,MACZ;AAAA,MACA,MAAM,CAAC,QAAQ;AACb,YAAI,WAAW;AACb,kBAAQ,QAAQ,QAAa;AAAA,QAAA,OACxB;AACL,iBAAO,GAAG;AAAA,QACZ;AAAA,MACF;AAAA,IAAA,CACD;AAAA,EAAA,CACF;AACH;AAMO,SAAS,iBAAiB;AAC/B,YAAUN,UAAkB,kBAAA;AAC5B,gBAAcC,UAAAA,WAAW,OAAO;AACzB,SAAA;AACT;AAEO,SAAS,WAAW,KAAa;AAC5B,YAAA;AACV,gBAAcA,UAAAA,WAAW,OAAO;AAClC;;;;"}
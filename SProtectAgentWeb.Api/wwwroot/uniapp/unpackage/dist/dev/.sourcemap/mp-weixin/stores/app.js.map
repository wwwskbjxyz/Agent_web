{"version":3,"file":"app.js","sources":["stores/app.ts"],"sourcesContent":["import { computed, reactive, ref, watch } from 'vue';\r\nimport { defineStore } from 'pinia';\r\nimport {\r\n  apiRequest,\r\n  refreshBaseURL\r\n} from '@/common/api';\r\nimport { usePlatformStore } from '@/stores/platform';\r\nimport type {\r\n  AgentInfoResponse,\r\n  AgentListItem,\r\n  AgentSearchFilters,\r\n  AgentStatusMutation,\r\n  AgentCreatePayload,\r\n  AgentAdjustBalancePayload,\r\n  AgentUpdateRemarkPayload,\r\n  AgentUpdatePasswordPayload,\r\n  AgentAssignCardTypesPayload,\r\n  AgentStatistics,\r\n  AnnouncementItem,\r\n  AnnouncementResponse,\r\n  CardInfo,\r\n  CardListItem,\r\n  CardListResponse,\r\n  CardSearchFilters,\r\n  CardStatusMutation,\r\n  CardVerificationResult,\r\n  ChatConversationDto,\r\n  ChatContactDto,\r\n  ChatMessageDto,\r\n  ChatMessagesResponse,\r\n  ChatSessionItem,\r\n  ChatContactItem,\r\n  CardTypeInfo,\r\n  CardTypeListResponse,\r\n  GenerateCardsResponse,\r\n  DashboardPayload,\r\n  DashboardStat,\r\n  LanzouLinkListResponse,\r\n  LanzouLinkRecordDto,\r\n  LinkRecordItem,\r\n  LoginPayload,\r\n  LoginSuccess,\r\n  BlacklistLogItem,\r\n  BlacklistMachineItem,\r\n  BlacklistMachineCreatePayload,\r\n  RefreshUserInfoResponse,\r\n  RecentActivationTrendResponse,\r\n  SalesQueryFilters,\r\n  SalesQueryResultPayload,\r\n  SettlementAgentOption,\r\n  SettlementBillItem,\r\n  SettlementCycleInfoDto,\r\n  SettlementRateItem,\r\n  SettlementRateListResponse,\r\n  SoftwareAgentInfo,\r\n  SoftwareListResponse,\r\n  SystemStatusResponse,\r\n  SubAgentTrendPayload,\r\n  TrendPoint,\r\n  UsageDistributionResponse,\r\n  UsageHeatmapItem,\r\n  UserProfile,\r\n  VerificationPayload,\r\n  VerificationStats\r\n} from '@/common/types';\r\nimport {\r\n  clearSelectedSoftwareDisplayName,\r\n  clearToken,\r\n  getSelectedSoftwareDisplayName,\r\n  getSelectedSoftwareName,\r\n  getThemePreference,\r\n  getTokenValue,\r\n  setSelectedSoftwareDisplayName,\r\n  setSelectedSoftwareName,\r\n  setThemePreference,\r\n  setTokenValue,\r\n  type ThemePreference\r\n} from '@/utils/storage';\r\nimport {\r\n  formatDate,\r\n  formatDateTime,\r\n  formatTime\r\n} from '@/utils/time';\r\n\r\ndeclare const getCurrentPages: (() => Array<{ route?: string }>) | undefined;\r\n\r\nconst DEFAULT_CARD_PAGE_SIZE = 50;\r\nconst DEFAULT_LINK_PAGE_SIZE = 20;\r\n\r\ntype VerificationStatus = VerificationPayload['status'];\r\n\r\nfunction resolveCardStatus(state?: string | null): { status: CardListItem['status']; text: string } {\r\n  const normalized = (state ?? '').trim();\r\n  if (!normalized) {\r\n    return { status: 'unknown', text: '未知' };\r\n  }\r\n  if (['启用', '可用', 'active', 'enabled', '0'].includes(normalized)) {\r\n    return { status: 'enabled', text: normalized || '启用' };\r\n  }\r\n  if (['禁用', '封禁', 'disabled', '1', '停用'].includes(normalized)) {\r\n    return { status: 'disabled', text: normalized };\r\n  }\r\n  return { status: 'unknown', text: normalized };\r\n}\r\n\r\nfunction ensureArray<T>(value: unknown): T[] {\r\n  if (Array.isArray(value)) {\r\n    return value as T[];\r\n  }\r\n  return [];\r\n}\r\n\r\nfunction splitKeywordInput(raw: string): string[] {\r\n  return raw\r\n    .split(/[\\s,，;；]+/)\r\n    .map((item) => item.trim())\r\n    .filter((item) => item.length > 0);\r\n}\r\n\r\nfunction computeTrendMetrics(points: TrendPoint[]): { total: number; max: number } {\r\n  if (!points.length) {\r\n    return { total: 0, max: 0 };\r\n  }\r\n  return points.reduce(\r\n    (acc, point) => {\r\n      const value = Number(point.value ?? 0);\r\n      if (Number.isFinite(value)) {\r\n        acc.total += value;\r\n        if (value > acc.max) {\r\n          acc.max = value;\r\n        }\r\n      }\r\n      return acc;\r\n    },\r\n    { total: 0, max: 0 }\r\n  );\r\n}\r\n\r\nfunction buildSubAgentTrendPayload(trend?: RecentActivationTrendResponse): SubAgentTrendPayload {\r\n  if (!trend) {\r\n    return { categories: [], series: [], total: 0 };\r\n  }\r\n\r\n  const categoriesRaw = ensureArray<string>(trend.categories);\r\n  const points = ensureArray(trend.points);\r\n  const categories = categoriesRaw.length\r\n    ? categoriesRaw.map((item) => item.trim()).filter((item) => item.length > 0)\r\n    : points.map((item) => (item?.date || '').toString().trim()).filter((item) => item.length > 0);\r\n\r\n  const normalizedCategories = categories.length ? categories : [];\r\n  const series = ensureArray(trend.series).map((item) => {\r\n    const name = (item?.displayName || item?.agent || '').toString().trim() || '未命名代理';\r\n    const map = new Map<string, number>();\r\n    ensureArray(item?.points).forEach((point) => {\r\n      const key = (point?.date || '').toString().trim();\r\n      if (!key) return;\r\n      const value = Number(point?.count ?? 0);\r\n      map.set(key, Number.isFinite(value) ? value : 0);\r\n    });\r\n    const values = normalizedCategories.map((category) => map.get(category) ?? 0);\r\n    const total = values.reduce((sum, value) => sum + value, 0);\r\n    return { name, values, total };\r\n  });\r\n\r\n  const total = series.reduce((sum, item) => sum + item.total, 0);\r\n  return { categories: normalizedCategories, series, total };\r\n}\r\n\r\nfunction normalizeSoftwareName(value?: string | null): string {\r\n  return (value ?? '').toString().trim().toLowerCase();\r\n}\r\n\r\ninterface ChatMessageSendOptions {\r\n  type?: 'text' | 'image';\r\n  mediaBase64?: string;\r\n  mediaName?: string;\r\n  caption?: string;\r\n}\r\n\r\nfunction matchesSoftware(value: unknown, software: string): boolean {\r\n  if (!software) return false;\r\n  return normalizeSoftwareName(value).toLowerCase() === normalizeSoftwareName(software).toLowerCase();\r\n}\r\n\r\nconst BLACKLIST_STORAGE_PREFIX = 'sprotect:blacklist:lastSeen:';\r\n\r\nfunction buildBlacklistStorageKey(software: string): string {\r\n  return `${BLACKLIST_STORAGE_PREFIX}${software}`;\r\n}\r\n\r\nfunction normalizeStorageValue(value: unknown): string {\r\n  if (typeof value === 'string') {\r\n    return value;\r\n  }\r\n  if (typeof value === 'number' && Number.isFinite(value)) {\r\n    return value.toString();\r\n  }\r\n  if (value != null) {\r\n    try {\r\n      return String(value);\r\n    } catch (error) {\r\n      console.warn('Failed to normalize storage value', error);\r\n    }\r\n  }\r\n  return '';\r\n}\r\n\r\nfunction transformSalesResult(data?: any): SalesQueryResultPayload {\r\n  const cards = ensureArray<any>(data?.cards).map((item) => ({\r\n    card: (item?.card || item?.prefix_Name || item?.key || '').toString(),\r\n    activateTime: formatDateTime(item?.activateTime ?? item?.activateTime_ ?? item?.ActivateTime_)\r\n  }));\r\n  const count = Number(data?.count ?? cards.length ?? 0);\r\n  const settlements = ensureArray<any>(data?.settlements)\r\n    .map((item) => ({\r\n      cardType: (item?.cardType ?? '').toString(),\r\n      count: Number(item?.count ?? 0) || 0,\r\n      price: Number(item?.price ?? 0) || 0,\r\n      total: Number(item?.total ?? 0) || 0\r\n    }))\r\n    .filter((item) => item.cardType);\r\n  const totalAmountRaw = Number(data?.totalAmount ?? 0);\r\n  const totalAmount = Number.isFinite(totalAmountRaw)\r\n    ? totalAmountRaw\r\n    : settlements.reduce((sum, item) => sum + item.total, 0);\r\n  return {\r\n    count: Number.isFinite(count) ? count : cards.length,\r\n    cards,\r\n    settlements,\r\n    totalAmount\r\n  };\r\n}\r\n\r\nfunction normalizeSettlementBill(raw: any): SettlementBillItem {\r\n  const breakdowns = ensureArray<any>(raw?.breakdowns)\r\n    .map((item) => ({\r\n      agent: (item?.agent ?? '').toString().trim(),\r\n      displayName: (item?.displayName ?? '').toString().trim(),\r\n      count: Number(item?.count ?? 0) || 0,\r\n      amount: Number(item?.amount ?? 0) || 0\r\n    }))\r\n    .filter((item) => item.agent.length > 0);\r\n\r\n  return {\r\n    id: Number(raw?.id ?? 0) || 0,\r\n    cycleStartUtc: (raw?.cycleStartUtc ?? '').toString(),\r\n    cycleEndUtc: (raw?.cycleEndUtc ?? '').toString(),\r\n    amount: Number(raw?.amount ?? 0) || 0,\r\n    suggestedAmount:\r\n      raw?.suggestedAmount == null\r\n        ? undefined\r\n        : (() => {\r\n            const value = Number(raw.suggestedAmount);\r\n            return Number.isFinite(value) && value > 0 ? value : undefined;\r\n          })(),\r\n    isSettled: Boolean(raw?.isSettled),\r\n    settledAtUtc: raw?.settledAtUtc ?? raw?.SettledAtUtc ?? null,\r\n    note: (raw?.note ?? '').toString() || null,\r\n    breakdowns\r\n  };\r\n}\r\n\r\nfunction transformBlacklistLog(raw: any): BlacklistLogItem {\r\n  return {\r\n    timestamp: formatDateTime(raw?.timestamp ?? raw?.Timestamp),\r\n    software: normalizeSoftwareName(raw?.software ?? raw?.Software),\r\n    ip: (raw?.ip ?? raw?.IP ?? '').toString(),\r\n    card: (raw?.card ?? raw?.Card ?? '').toString(),\r\n    machineCode: (raw?.pcsign ?? raw?.PCSign ?? '').toString(),\r\n    event: (raw?.errEvents ?? raw?.ErrEvents ?? '').toString()\r\n  };\r\n}\r\n\r\nfunction transformBlacklistMachine(raw: any): BlacklistMachineItem {\r\n  const value = (raw?.value ?? raw?.Value ?? '').toString();\r\n  return {\r\n    value,\r\n    software: normalizeSoftwareName(raw?.software ?? raw?.Software),\r\n    type: Number(raw?.type ?? raw?.Type ?? 2) || 0,\r\n    remarks: (raw?.remarks ?? raw?.Remarks ?? '').toString() || undefined\r\n  };\r\n}\r\n\r\nfunction buildCardListPayload(\r\n  software: string,\r\n  filters: CardSearchFilters,\r\n  page: number,\r\n  limit: number\r\n): Record<string, unknown> {\r\n  const payload: Record<string, unknown> = { software, page, limit };\r\n  const agent = (filters.agent ?? '').trim();\r\n  if (agent) {\r\n    payload.agent = agent;\r\n    payload.includeDescendants = false;\r\n  } else {\r\n    payload.includeDescendants = filters.includeDescendants ?? true;\r\n  }\r\n\r\n  if (filters.status && filters.status !== '') {\r\n    payload.status = filters.status;\r\n  }\r\n\r\n  const rawKeyword = (filters.keyword ?? '').trim();\r\n  const baseKeywords = filters.keywords && filters.keywords.length ? filters.keywords : splitKeywordInput(rawKeyword);\r\n  const ipRegex = /^(\\d{1,3}\\.){3}\\d{1,3}$/;\r\n\r\n  let searchType = typeof filters.searchType === 'number' ? filters.searchType : 0;\r\n  if (filters.cardType && (searchType === 0 || searchType === 3)) {\r\n    searchType = 3;\r\n  }\r\n  if (!filters.cardType && baseKeywords.length === 1 && ipRegex.test(baseKeywords[0]) && (searchType === 0 || searchType === 2)) {\r\n    searchType = 2;\r\n  }\r\n  payload.searchType = searchType;\r\n\r\n  let keywords: string[] = [];\r\n  if (searchType === 3 && filters.cardType) {\r\n    keywords = [filters.cardType];\r\n  } else if (searchType === 2) {\r\n    keywords = baseKeywords.filter((item) => ipRegex.test(item));\r\n  } else if (searchType === 1) {\r\n    keywords = baseKeywords.slice(0, 10);\r\n  } else {\r\n    keywords = baseKeywords;\r\n  }\r\n\r\n  if (filters.machineCode) {\r\n    keywords.push(filters.machineCode.trim());\r\n  }\r\n\r\n  if (filters.ip) {\r\n    keywords.push(filters.ip.trim());\r\n  }\r\n\r\n  keywords = Array.from(new Set(keywords.filter((item) => item.length > 0)));\r\n\r\n  if (keywords.length) {\r\n    payload.keywords = keywords;\r\n  }\r\n\r\n  if (filters.cardType && searchType !== 3) {\r\n    payload.cardType = filters.cardType;\r\n  }\r\n\r\n  if (filters.startTime) {\r\n    payload.startTime = filters.startTime;\r\n  }\r\n  if (filters.endTime) {\r\n    payload.endTime = filters.endTime;\r\n  }\r\n\r\n  return payload;\r\n}\r\n\r\nfunction transformCard(item: CardInfo): CardListItem {\r\n  const key = item.prefix_Name || '';\r\n  const owner = (item.whom || item.owner || '').trim();\r\n  const cardType = (item.cardType || '').trim();\r\n  const { status, text } = resolveCardStatus(item.state);\r\n  const createdAt = formatDateTime(item.createData_);\r\n  const activatedAt = formatDateTime(item.activateTime_ ?? item.lastLoginTime_);\r\n  const expireAt = formatDateTime(item.expiredTime__);\r\n  const machineCodes = ensureArray<string>(item.machineCodes)\r\n    .map((code) => code.trim())\r\n    .filter((code) => code.length > 0);\r\n\r\n  if (item.machineCode) {\r\n    const candidate = item.machineCode.trim();\r\n    if (candidate && !machineCodes.includes(candidate)) {\r\n      machineCodes.unshift(candidate);\r\n    }\r\n  }\r\n\r\n  return {\r\n    key,\r\n    owner: owner || '—',\r\n    cardType: cardType || '未分类',\r\n    status,\r\n    statusText: text || (status === 'enabled' ? '启用' : status === 'disabled' ? '禁用' : '未知'),\r\n    createdAt,\r\n    activatedAt,\r\n    expireAt,\r\n    ip: item.ip || undefined,\r\n    machineCodes,\r\n    remark: item.remarks || ''\r\n  };\r\n}\r\n\r\nfunction determineAgentStatus(status: unknown): AgentListItem['status'] {\r\n  if (typeof status === 'boolean') {\r\n    return status ? 'enabled' : 'disabled';\r\n  }\r\n  if (typeof status === 'number') {\r\n    return status === 0 ? 'enabled' : 'disabled';\r\n  }\r\n  if (typeof status === 'string') {\r\n    const normalized = status.trim().toLowerCase();\r\n    if (['启用', 'enabled', 'true', '0'].includes(normalized)) {\r\n      return 'enabled';\r\n    }\r\n    if (['禁用', 'disabled', 'false', '1', '停用'].includes(normalized)) {\r\n      return 'disabled';\r\n    }\r\n  }\r\n  return 'enabled';\r\n}\r\n\r\nfunction toNumber(value: unknown, fallback = 0) {\r\n  const numeric = Number(value);\r\n  return Number.isFinite(numeric) ? numeric : fallback;\r\n}\r\n\r\nfunction transformAgent(raw: any): AgentListItem {\r\n  const username = (raw?.username || raw?.user || raw?.account || '-').toString();\r\n  const balance = toNumber(raw?.balance ?? raw?.money);\r\n  const timeStock = toNumber(raw?.timeStock ?? raw?.stockHours);\r\n  const parities = toNumber(raw?.parities);\r\n  const totalParities = toNumber(raw?.totalParities ?? raw?.total_parities, parities);\r\n  const remark = (raw?.remark ?? raw?.remarks ?? '').toString();\r\n  const password = (raw?.password ?? raw?.Password ?? '').toString();\r\n  const cardTypes = ensureArray<string>(raw?.card_types ?? raw?.cardTypes).map((item) => item.toString());\r\n  const expiration = raw?.expiration ? formatDateTime(raw.expiration) : undefined;\r\n  const status = determineAgentStatus(raw?.status ?? raw?.stat ?? raw?.cardsEnable ?? raw?.enabled ?? raw?.state);\r\n  const depth = toNumber(raw?.depth, 0);\r\n\r\n  return {\r\n    username,\r\n    balance,\r\n    timeStock,\r\n    parities,\r\n    totalParities,\r\n    status,\r\n    depth,\r\n    remark,\r\n    password,\r\n    cardTypes,\r\n    expiration\r\n  };\r\n}\r\n\r\nfunction transformContact(dto: ChatContactDto): ChatContactItem {\r\n  const username = (dto?.username || '').trim();\r\n  const displayName = (dto?.displayName || username || '-').toString().trim();\r\n  const remark = dto?.remark?.toString().trim();\r\n  return {\r\n    username,\r\n    displayName: displayName || username || '未命名联系人',\r\n    remark: remark || undefined\r\n  };\r\n}\r\n\r\nfunction buildDashboardStats(stats?: AgentStatistics): DashboardStat[] {\r\n  if (!stats) {\r\n    return [];\r\n  }\r\n  return [\r\n    { key: 'total', label: '卡密总数', value: stats.totalCards.toString() },\r\n    { key: 'active', label: '启用中', value: stats.activeCards.toString() },\r\n    { key: 'used', label: '已使用', value: stats.usedCards.toString() },\r\n    { key: 'expired', label: '已过期', value: stats.expiredCards.toString() },\r\n    { key: 'subAgents', label: '子代理', value: stats.subAgents.toString() }\r\n  ];\r\n}\r\n\r\nfunction buildTrendData(trend?: RecentActivationTrendResponse): TrendPoint[] {\r\n  if (!trend) {\r\n    return [];\r\n  }\r\n\r\n  if (Array.isArray(trend.categories) && trend.categories.length > 0) {\r\n    const map = new Map<string, number>();\r\n    (trend.points || []).forEach((point) => {\r\n      if (!point?.date) return;\r\n      map.set(point.date, toNumber(point.count));\r\n    });\r\n    const categories = trend.categories.slice(-7);\r\n    return categories.map((category) => ({\r\n      date: category,\r\n      value: map.get(category) ?? 0\r\n    }));\r\n  }\r\n\r\n  const points = (trend.points || []).map((point) => ({\r\n    date: point.date,\r\n    value: toNumber(point.count)\r\n  }));\r\n  return points.slice(-7);\r\n}\r\n\r\nfunction buildAnnouncementsPayload(response?: AnnouncementResponse | null): AnnouncementItem[] {\r\n  if (!response || !response.content) {\r\n    return [];\r\n  }\r\n  return [\r\n    {\r\n      id: 'announcement',\r\n      title: '运维公告',\r\n      content: response.content.trim(),\r\n      updatedAt: formatDateTime(response.updatedAt)\r\n    }\r\n  ];\r\n}\r\n\r\nfunction buildHeatmapPayload(response?: UsageDistributionResponse | null): UsageHeatmapItem[] {\r\n  if (!response) {\r\n    return [];\r\n  }\r\n\r\n  const provinces = ensureArray(response.provinces).sort((a, b) => (b?.count ?? 0) - (a?.count ?? 0));\r\n  const total = response.resolvedTotal || provinces.reduce((sum, item) => sum + (item?.count ?? 0), 0);\r\n\r\n  return provinces.slice(0, 6).map((item, index) => {\r\n    const name = item?.province || item?.city || item?.district || `地区${index + 1}`;\r\n    const count = item?.count ?? 0;\r\n    const percentage = total > 0 ? Math.round((count / total) * 1000) / 10 : 0;\r\n    return {\r\n      name,\r\n      count,\r\n      percentage\r\n    };\r\n  });\r\n}\r\n\r\nfunction transformLink(record: LanzouLinkRecordDto): LinkRecordItem {\r\n  return {\r\n    id: record.id,\r\n    url: record.url,\r\n    extractionCode: record.extractionCode,\r\n    createdAt: formatDateTime(record.createdAt),\r\n    content: record.rawContent\r\n  };\r\n}\r\n\r\nfunction transformConversation(dto: ChatConversationDto, currentUser: string): ChatSessionItem {\r\n  const participants = ensureArray<string>(dto.participants);\r\n  const displayName = dto.isGroup\r\n    ? dto.groupName || `群聊（${participants.length}）`\r\n    : participants.find((name) => name && name !== currentUser) || dto.groupName || dto.conversationId;\r\n  return {\r\n    id: dto.conversationId,\r\n    title: displayName,\r\n    unread: dto.unreadCount ?? 0,\r\n    updatedAt: formatDateTime(dto.updatedAt),\r\n    preview: dto.lastMessagePreview || '',\r\n    isGroup: dto.isGroup,\r\n    participants,\r\n    messages: []\r\n  };\r\n}\r\n\r\nfunction transformMessages(list: ChatMessageDto[], currentUser: string): ChatSessionItem['messages'] {\r\n  return ensureArray<ChatMessageDto>(list).map((message) => ({\r\n    id: message.id,\r\n    sender: message.sender === currentUser ? 'user' : 'system',\r\n    content: message.content,\r\n    time: formatTime(message.timestamp),\r\n    type: message.type,\r\n    caption: message.caption\r\n  }));\r\n}\r\n\r\nfunction resolveVerificationStatus(result: CardVerificationResult): VerificationStatus {\r\n  if (result.verificationPassed) {\r\n    return 'success';\r\n  }\r\n  if (result.hasReachedLinkLimit) {\r\n    return 'warning';\r\n  }\r\n  return 'error';\r\n}\r\n\r\nfunction buildVerificationPayload(result: CardVerificationResult): VerificationPayload {\r\n  const stats: VerificationStats = {\r\n    attemptNumber: result.attemptNumber,\r\n    remainingDownloads: result.remainingLinkQuota,\r\n    expiresAt: result.expiresAt ? formatDate(result.expiresAt) : undefined\r\n  };\r\n\r\n  const history = ensureArray(result.downloadHistory).map((item) => ({\r\n    id: item.linkId,\r\n    url: item.url,\r\n    extractionCode: item.extractionCode,\r\n    assignedAt: formatDateTime(item.assignedAt),\r\n    isNew: !!item.isNew\r\n  }));\r\n\r\n  return {\r\n    status: resolveVerificationStatus(result),\r\n    message: result.message,\r\n    downloadUrl: result.download?.url,\r\n    extractionCode: result.download?.extractionCode,\r\n    stats,\r\n    history\r\n  };\r\n}\r\n\r\nlet bootstrapPromise: Promise<void> | null = null;\r\nlet redirectingToLogin = false;\r\n\r\nexport const useAppStore = defineStore('app', () => {\r\n  const loading = reactive({\r\n    bootstrap: false,\r\n    login: false,\r\n    logout: false,\r\n    user: false,\r\n    software: false,\r\n    dashboard: false,\r\n    cards: false,\r\n    cardTypes: false,\r\n    agents: false,\r\n    links: false,\r\n    chat: false,\r\n    chatMessages: false,\r\n    chatContacts: false,\r\n    verification: false,\r\n    system: false,\r\n    sales: false,\r\n    settlementRates: false,\r\n    saveSettlementRates: false,\r\n    blacklistLogs: false,\r\n    blacklistMachines: false\r\n  });\r\n\r\n  const token = ref<string | null>(getTokenValue());\r\n  const session = ref<RefreshUserInfoResponse | null>(null);\r\n  const softwareList = ref<SoftwareAgentInfo[]>([]);\r\n  const selectedSoftware = ref<string>(getSelectedSoftwareDisplayName() || '');\r\n  const settlementAgents = ref<SettlementAgentOption[]>([]);\r\n  const selectedSettlementAgent = ref<string>('');\r\n  const settlementCycle = ref<SettlementCycleInfoDto | null>(null);\r\n  const settlementBills = ref<SettlementBillItem[]>([]);\r\n  const settlementHasReminder = ref(false);\r\n  const theme = ref<ThemePreference>(getThemePreference());\r\n\r\n  const dashboard = reactive<DashboardPayload>({\r\n    stats: [],\r\n    trend: [],\r\n    trendTotal: 0,\r\n    trendMax: 0,\r\n    subAgentTrend: { categories: [], series: [], total: 0 },\r\n    announcements: [],\r\n    usageHeatmap: [],\r\n    salesResult: { count: 0, cards: [], settlements: [], totalAmount: 0 },\r\n    salesFilters: { includeDescendants: true }\r\n  });\r\n\r\n  const recentCards = ref<CardListItem[]>([]);\r\n  const cardKeys = ref<CardListItem[]>([]);\r\n  const cardTotal = ref(0);\r\n  const cardTypes = ref<CardTypeInfo[]>([]);\r\n  const cardFilters = reactive<CardSearchFilters>({\r\n    includeDescendants: true,\r\n    searchType: 0,\r\n    status: '',\r\n    page: 1,\r\n    limit: DEFAULT_CARD_PAGE_SIZE\r\n  });\r\n  const agents = ref<AgentListItem[]>([]);\r\n  const agentTotal = ref(0);\r\n  const agentFilters = reactive<AgentSearchFilters>({ keyword: '', page: 1, limit: 50 });\r\n  const linkRecords = ref<LinkRecordItem[]>([]);\r\n  const linkTotal = ref(0);\r\n  const chatSessions = ref<ChatSessionItem[]>([]);\r\n  const chatContacts = ref<ChatContactItem[]>([]);\r\n  const verification = ref<VerificationPayload | null>(null);\r\n  const systemStatus = ref<SystemStatusResponse | null>(null);\r\n  const blacklistLogs = ref<BlacklistLogItem[]>([]);\r\n  const blacklistMachines = ref<BlacklistMachineItem[]>([]);\r\n  const blacklistLatestBySoftware = reactive<Record<string, string>>({});\r\n  const blacklistLastSeenCache = reactive<Record<string, string>>({});\r\n  const settlementRateCache = reactive<Record<string, SettlementRateItem[]>>({});\r\n  const cardTypeRequestCache = new Map<string, Promise<CardTypeInfo[]>>();\r\n\r\n  const activeSettlementAgent = computed(() => {\r\n    const explicit = selectedSettlementAgent.value?.trim();\r\n    if (explicit) {\r\n      return explicit;\r\n    }\r\n    const software = selectedSoftware.value;\r\n    if (software) {\r\n      const profile = session.value?.softwareAgentInfo?.[software];\r\n      const username = profile?.user?.trim();\r\n      if (username) {\r\n        return username;\r\n      }\r\n    }\r\n    return session.value?.username?.trim() || '';\r\n  });\r\n\r\n  function buildSettlementCacheKey(software: string, agent?: string): string {\r\n    const trimmedSoftware = (software ?? '').trim();\r\n    const normalizedAgent = (agent ?? '').trim() || activeSettlementAgent.value || 'anonymous';\r\n    return `${trimmedSoftware}::${normalizedAgent}`;\r\n  }\r\n  const settlementRates = computed<SettlementRateItem[]>(() => {\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      return [];\r\n    }\r\n    const cacheKey = buildSettlementCacheKey(software, activeSettlementAgent.value);\r\n    return settlementRateCache[cacheKey] ?? [];\r\n  });\r\n\r\n  const chatUnreadCount = computed(() =>\r\n    chatSessions.value.reduce((sum, item) => sum + (Number(item.unread) > 0 ? Number(item.unread) : 0), 0)\r\n  );\r\n  const hasNewBlacklistLogs = computed(() => {\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      return false;\r\n    }\r\n    const latest = blacklistLatestBySoftware[software];\r\n    if (!latest) {\r\n      return false;\r\n    }\r\n    const lastSeen = getStoredBlacklistTimestamp(software);\r\n    if (!lastSeen) {\r\n      return true;\r\n    }\r\n    return latest > lastSeen;\r\n  });\r\n\r\n  function getStoredBlacklistTimestamp(software: string): string {\r\n    if (!software) {\r\n      return '';\r\n    }\r\n    if (Object.prototype.hasOwnProperty.call(blacklistLastSeenCache, software)) {\r\n      return blacklistLastSeenCache[software] ?? '';\r\n    }\r\n    try {\r\n      const stored = uni.getStorageSync(buildBlacklistStorageKey(software));\r\n      const normalized = normalizeStorageValue(stored);\r\n      blacklistLastSeenCache[software] = normalized;\r\n      return normalized;\r\n    } catch (error) {\r\n      console.warn('Failed to read blacklist last seen timestamp', error);\r\n      blacklistLastSeenCache[software] = '';\r\n      return '';\r\n    }\r\n  }\r\n\r\n  function setStoredBlacklistTimestamp(software: string, timestamp: string) {\r\n    if (!software) {\r\n      return;\r\n    }\r\n    try {\r\n      if (!timestamp) {\r\n        if (typeof uni.removeStorageSync === 'function') {\r\n          uni.removeStorageSync(buildBlacklistStorageKey(software));\r\n        } else {\r\n          uni.setStorageSync(buildBlacklistStorageKey(software), '');\r\n        }\r\n      } else {\r\n        uni.setStorageSync(buildBlacklistStorageKey(software), timestamp);\r\n      }\r\n    } catch (error) {\r\n      console.warn('Failed to persist blacklist last seen timestamp', error);\r\n    }\r\n    blacklistLastSeenCache[software] = timestamp;\r\n  }\r\n\r\n  const lastLoadedCardTypeSoftware = ref<string>('');\r\n  const lastLoadedContactSoftware = ref<string>('');\r\n\r\n  watch(\r\n    () => selectedSoftware.value,\r\n    (software) => {\r\n      const normalized = software?.trim();\r\n      if (!normalized) {\r\n        cardTypes.value = [];\r\n        lastLoadedCardTypeSoftware.value = '';\r\n        return;\r\n      }\r\n\r\n      if (!token.value) {\r\n        return;\r\n      }\r\n\r\n      void loadCardTypes().catch((error) => {\r\n        console.warn('Prefetch card types failed', error);\r\n      });\r\n    },\r\n    { flush: 'post' }\r\n  );\r\n\r\n  const profile = computed<UserProfile | null>(() => {\r\n    if (!session.value) {\r\n      return null;\r\n    }\r\n    return {\r\n      id: session.value.username,\r\n      name: session.value.username,\r\n      role: session.value.isSuper ? '超级管理员' : '代理用户',\r\n      avatar: '',\r\n      permissions: session.value.softwareList ?? []\r\n    };\r\n  });\r\n\r\n  const isSuper = computed(() => session.value?.isSuper ?? false);\r\n\r\n  function logoutLocal() {\r\n    clearToken();\r\n    token.value = null;\r\n    session.value = null;\r\n    softwareList.value = [];\r\n    selectedSoftware.value = '';\r\n    selectedSettlementAgent.value = '';\r\n    settlementAgents.value = [];\r\n    cardTypes.value = [];\r\n    lastLoadedCardTypeSoftware.value = '';\r\n    cardTypeRequestCache.clear();\r\n    setSelectedSoftwareName();\r\n    bootstrapPromise = null;\r\n    Object.keys(settlementRateCache).forEach((key) => {\r\n      delete settlementRateCache[key];\r\n    });\r\n  }\r\n\r\n  function setTheme(next: ThemePreference) {\r\n    if (theme.value === next) {\r\n      return;\r\n    }\r\n    theme.value = next;\r\n    setThemePreference(next);\r\n  }\r\n\r\n  function redirectToLogin(options?: { message?: string }) {\r\n    const message = options?.message;\r\n    const wasRedirecting = redirectingToLogin;\r\n    logoutLocal();\r\n\r\n    if (message && !wasRedirecting) {\r\n      uni.showToast({ title: message, icon: 'none' });\r\n    }\r\n\r\n    const pagesGetter = typeof getCurrentPages === 'function' ? getCurrentPages : undefined;\r\n    const pages = pagesGetter ? pagesGetter() : [];\r\n    const hasPages = Array.isArray(pages) && pages.length > 0;\r\n    const currentRoute = hasPages ? pages[pages.length - 1]?.route ?? '' : '';\r\n\r\n    if (!hasPages || currentRoute === 'pages/login/index') {\r\n      redirectingToLogin = false;\r\n      return;\r\n    }\r\n\r\n    if (redirectingToLogin) {\r\n      return;\r\n    }\r\n\r\n    redirectingToLogin = true;\r\n    const delay = message && !wasRedirecting ? 420 : 80;\r\n    setTimeout(() => {\r\n      uni.reLaunch({ url: '/pages/login/index' });\r\n      setTimeout(() => {\r\n        redirectingToLogin = false;\r\n      }, 240);\r\n    }, delay);\r\n  }\r\n\r\n  function handleUnauthorized(message?: string) {\r\n    redirectToLogin({ message: message || '登录已过期，请重新登录' });\r\n  }\r\n\r\n  async function bootstrap(force = false) {\r\n    if (!token.value) {\r\n      redirectToLogin();\r\n      return;\r\n    }\r\n\r\n    if (!force && session.value && softwareList.value.length) {\r\n      return;\r\n    }\r\n\r\n    if (loading.bootstrap && bootstrapPromise) {\r\n      return bootstrapPromise;\r\n    }\r\n\r\n    loading.bootstrap = true;\r\n    refreshBaseURL();\r\n\r\n    bootstrapPromise = (async () => {\r\n      try {\r\n        await loadCurrentUser();\r\n        await loadSoftwareList();\r\n      } catch (error) {\r\n        console.error('Bootstrap failed', error);\r\n        redirectToLogin();\r\n        throw error;\r\n      } finally {\r\n        loading.bootstrap = false;\r\n        bootstrapPromise = null;\r\n      }\r\n    })();\r\n\r\n    return bootstrapPromise;\r\n  }\r\n\r\n  async function ensureReady() {\r\n    if (!token.value) {\r\n      try {\r\n        const platformStore = usePlatformStore();\r\n        if (platformStore.isAuthenticated) {\r\n          const binding = platformStore.selectedBinding || platformStore.bindings[0];\r\n          if (binding?.authorAccount && binding?.authorPassword && !loading.login) {\r\n            await login(\r\n              { username: binding.authorAccount, password: binding.authorPassword },\r\n              { skipBootstrap: true }\r\n            );\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.warn('Auto login via platform binding failed', error);\r\n      }\r\n    }\r\n    if (!token.value) {\r\n      redirectToLogin();\r\n      return false;\r\n    }\r\n    if (!session.value || !softwareList.value.length) {\r\n      await bootstrap();\r\n    }\r\n    return !!session.value;\r\n  }\r\n\r\n  async function loadCurrentUser() {\r\n    if (!token.value) {\r\n      session.value = null;\r\n      return null;\r\n    }\r\n    loading.user = true;\r\n    try {\r\n      const data = await apiRequest<RefreshUserInfoResponse>({\r\n        url: '/api/Auth/getUserInfo',\r\n        method: 'POST',\r\n        auth: true,\r\n        disableMock: true\r\n      });\r\n      session.value = data;\r\n      return data;\r\n    } catch (error) {\r\n      session.value = null;\r\n      throw error;\r\n    } finally {\r\n      loading.user = false;\r\n    }\r\n  }\r\n\r\n  async function loadSoftwareList() {\r\n    if (!token.value) {\r\n      softwareList.value = [];\r\n      selectedSoftware.value = '';\r\n      return [];\r\n    }\r\n    loading.software = true;\r\n    try {\r\n      const response = await apiRequest<SoftwareListResponse>({\r\n        url: '/api/Software/GetSoftwareList',\r\n        method: 'POST',\r\n        auth: true,\r\n        disableMock: true\r\n      });\r\n      const items = ensureArray<SoftwareAgentInfo>(response?.softwares);\r\n      softwareList.value = items;\r\n\r\n      const stored = getSelectedSoftwareDisplayName() || getSelectedSoftwareName();\r\n      const matched = items.find((item) => normalizeSoftwareName(item.softwareName) === normalizeSoftwareName(stored));\r\n      if (matched) {\r\n        selectedSoftware.value = matched.softwareName;\r\n        setSelectedSoftwareDisplayName(matched.softwareName);\r\n        selectedSettlementAgent.value = '';\r\n        settlementAgents.value = [];\r\n      } else if (items.length) {\r\n        selectedSoftware.value = items[0].softwareName;\r\n        setSelectedSoftwareDisplayName(items[0].softwareName);\r\n        selectedSettlementAgent.value = '';\r\n        settlementAgents.value = [];\r\n      } else {\r\n        selectedSoftware.value = '';\r\n        clearSelectedSoftwareDisplayName();\r\n        selectedSettlementAgent.value = '';\r\n        settlementAgents.value = [];\r\n      }\r\n      return items;\r\n    } finally {\r\n      loading.software = false;\r\n    }\r\n  }\r\n\r\n  function setSelectedSoftware(name: string) {\r\n    const normalized = normalizeSoftwareName(name);\r\n    const match = softwareList.value.find((item) => normalizeSoftwareName(item.softwareName) === normalized);\r\n    if (!match) {\r\n      return;\r\n    }\r\n    selectedSoftware.value = match.softwareName;\r\n    setSelectedSoftwareDisplayName(match.softwareName);\r\n    selectedSettlementAgent.value = '';\r\n    settlementAgents.value = [];\r\n  }\r\n\r\n  function setSelectedSettlementAgent(username: string) {\r\n    selectedSettlementAgent.value = (username ?? '').trim();\r\n  }\r\n\r\n  async function login(payload: LoginPayload, options?: { skipBootstrap?: boolean }) {\r\n    loading.login = true;\r\n    try {\r\n      const response = await apiRequest<LoginSuccess>({\r\n        url: '/api/Auth/login',\r\n        method: 'POST',\r\n        data: payload,\r\n        disableMock: true\r\n      });\r\n      setTokenValue(response.token);\r\n      token.value = response.token;\r\n      if (!options?.skipBootstrap) {\r\n        await bootstrap(true);\r\n      }\r\n      return response;\r\n    } finally {\r\n      loading.login = false;\r\n    }\r\n  }\r\n\r\n  async function logout() {\r\n    if (loading.logout) {\r\n      return;\r\n    }\r\n\r\n    loading.logout = true;\r\n    try {\r\n      if (token.value) {\r\n        await apiRequest({\r\n          url: '/api/Auth/logout',\r\n          method: 'POST',\r\n          auth: true,\r\n          disableMock: true\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.warn('Logout request failed', error);\r\n    } finally {\r\n      loading.logout = false;\r\n      redirectToLogin({ message: '已退出登录' });\r\n    }\r\n  }\r\n\r\n  async function loadDashboard() {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      dashboard.stats = [];\r\n      dashboard.trend = [];\r\n      dashboard.announcements = [];\r\n      dashboard.usageHeatmap = [];\r\n      recentCards.value = [];\r\n      return;\r\n    }\r\n\r\n    loading.dashboard = true;\r\n    try {\r\n      const [agentInfo, trend, subTrend, usage, cardsResponse, announcement, system] = await Promise.all([\r\n        apiRequest<AgentInfoResponse>({\r\n          url: '/api/Agent/getUserInfo',\r\n          method: 'POST',\r\n          data: { software },\r\n          auth: true,\r\n          disableMock: true\r\n        }),\r\n        apiRequest<RecentActivationTrendResponse>({\r\n          url: '/api/Card/getRecentActivationTrend',\r\n          method: 'POST',\r\n          data: { software, OnlyDescendants: false },\r\n          auth: true,\r\n          disableMock: true\r\n        }),\r\n        apiRequest<RecentActivationTrendResponse>({\r\n          url: '/api/Card/getRecentActivationTrend',\r\n          method: 'POST',\r\n          data: { software, OnlyDescendants: true },\r\n          auth: true,\r\n          disableMock: true\r\n        }),\r\n        apiRequest<UsageDistributionResponse>({\r\n          url: '/api/Card/getUsageDistribution',\r\n          method: 'POST',\r\n          data: { software, includeDescendants: true },\r\n          auth: true,\r\n          disableMock: true\r\n        }),\r\n        apiRequest<CardListResponse>({\r\n          url: '/api/Card/getCardList',\r\n          method: 'POST',\r\n          data: { software, page: 1, limit: 8, includeDescendants: true },\r\n          auth: true,\r\n          disableMock: true\r\n        }),\r\n        apiRequest<AnnouncementResponse>({\r\n          url: '/api/System/announcement',\r\n          method: 'GET',\r\n          auth: true,\r\n          disableMock: true\r\n        }).catch(() => null),\r\n        session.value?.isSuper\r\n          ? apiRequest<SystemStatusResponse>({\r\n              url: '/api/System/status',\r\n              method: 'GET',\r\n              auth: true,\r\n              disableMock: true\r\n            }).catch(() => null)\r\n          : Promise.resolve(null)\r\n      ]);\r\n\r\n      dashboard.stats = buildDashboardStats(agentInfo?.statistics);\r\n      const totalTrend = buildTrendData(trend);\r\n      dashboard.trend = totalTrend;\r\n      const trendMetrics = computeTrendMetrics(totalTrend);\r\n      dashboard.trendTotal = trendMetrics.total;\r\n      dashboard.trendMax = trendMetrics.max;\r\n      const descendantTrend = buildSubAgentTrendPayload(subTrend);\r\n      dashboard.subAgentTrend = descendantTrend;\r\n      dashboard.announcements = buildAnnouncementsPayload(announcement);\r\n      dashboard.usageHeatmap = buildHeatmapPayload(usage);\r\n\r\n      const cards = ensureArray<CardInfo>(cardsResponse?.data);\r\n      recentCards.value = cards.map(transformCard);\r\n\r\n      if (system) {\r\n        systemStatus.value = system;\r\n      }\r\n    } finally {\r\n      loading.dashboard = false;\r\n    }\r\n  }\r\n\r\n  async function loadCardKeys(filters: Partial<CardSearchFilters> = {}) {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      cardKeys.value = [];\r\n      cardTotal.value = 0;\r\n      return;\r\n    }\r\n\r\n    const nextFilters: CardSearchFilters = {\r\n      ...cardFilters,\r\n      ...filters\r\n    };\r\n\r\n    nextFilters.page = nextFilters.page && nextFilters.page > 0 ? nextFilters.page : 1;\r\n    nextFilters.limit = nextFilters.limit && nextFilters.limit > 0 ? nextFilters.limit : DEFAULT_CARD_PAGE_SIZE;\r\n\r\n    Object.assign(cardFilters, nextFilters);\r\n\r\n    const page = cardFilters.page ?? 1;\r\n    const limit = cardFilters.limit ?? DEFAULT_CARD_PAGE_SIZE;\r\n\r\n    loading.cards = true;\r\n    try {\r\n      const payload = buildCardListPayload(software, cardFilters, page, limit);\r\n      const response = await apiRequest<CardListResponse>({\r\n        url: '/api/Card/getCardList',\r\n        method: 'POST',\r\n        data: payload,\r\n        auth: true,\r\n        disableMock: true\r\n      });\r\n      const items = ensureArray<CardInfo>(response?.data);\r\n      cardKeys.value = items.map(transformCard);\r\n      cardTotal.value = Number(response?.total ?? items.length ?? 0);\r\n    } finally {\r\n      loading.cards = false;\r\n    }\r\n  }\r\n\r\n  async function loadCardTypes(force = false) {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      cardTypes.value = [];\r\n      lastLoadedCardTypeSoftware.value = '';\r\n      return [];\r\n    }\r\n\r\n    if (!force && cardTypes.value.length > 0 && lastLoadedCardTypeSoftware.value === software) {\r\n      return cardTypes.value;\r\n    }\r\n\r\n    if (!force && cardTypeRequestCache.has(software)) {\r\n      return cardTypeRequestCache.get(software)!;\r\n    }\r\n\r\n    if (force) {\r\n      cardTypeRequestCache.delete(software);\r\n    }\r\n\r\n    const request = (async () => {\r\n      loading.cardTypes = true;\r\n      try {\r\n        const response = await apiRequest<CardTypeListResponse>({\r\n          url: '/api/CardType/getCardTypeList',\r\n          method: 'POST',\r\n          data: { software },\r\n          auth: true,\r\n          disableMock: true\r\n        });\r\n        const items = ensureArray(response?.items);\r\n        cardTypes.value = items.map((item) => ({\r\n          name: item?.name ?? '',\r\n          prefix: item?.prefix ?? undefined,\r\n          duration: Number(item?.duration ?? 0),\r\n          price: Number(item?.price ?? 0),\r\n          remarks: item?.remarks ?? undefined\r\n        }));\r\n        lastLoadedCardTypeSoftware.value = software;\r\n        return cardTypes.value;\r\n      } finally {\r\n        loading.cardTypes = false;\r\n        cardTypeRequestCache.delete(software);\r\n      }\r\n    })();\r\n\r\n    cardTypeRequestCache.set(software, request);\r\n    return request;\r\n  }\r\n\r\n  async function loadSettlementRates(force = false) {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      return [] as SettlementRateItem[];\r\n    }\r\n\r\n    const targetAgent = selectedSettlementAgent.value?.trim() || '';\r\n    const cacheKey = buildSettlementCacheKey(software, targetAgent || activeSettlementAgent.value);\r\n\r\n    if (!force && settlementRateCache[cacheKey]) {\r\n      return settlementRateCache[cacheKey];\r\n    }\r\n\r\n    loading.settlementRates = true;\r\n    try {\r\n      const response = await apiRequest<SettlementRateListResponse>({\r\n        url: '/api/Settlement/list',\r\n        method: 'POST',\r\n        data: { software, targetAgent: targetAgent || undefined },\r\n        auth: true,\r\n        disableMock: true\r\n      });\r\n\r\n      const responseTarget = (response?.targetAgent ?? targetAgent ?? '').toString().trim();\r\n      const options = ensureArray<any>(response?.agents)\r\n        .map((item) => ({\r\n          username: (item?.username ?? '').toString().trim(),\r\n          displayName: (item?.displayName ?? '').toString().trim(),\r\n          hasPendingReminder: Boolean(item?.hasPendingReminder)\r\n        }))\r\n        .filter((item) => item.username.length > 0);\r\n\r\n      if (!options.length) {\r\n        const fallback = activeSettlementAgent.value || session.value?.username?.trim() || '';\r\n        if (fallback) {\r\n          options.push({ username: fallback, displayName: `${fallback} · 当前账号` });\r\n        }\r\n      }\r\n\r\n      settlementAgents.value = options;\r\n      if (responseTarget !== selectedSettlementAgent.value) {\r\n        selectedSettlementAgent.value = responseTarget;\r\n      }\r\n\r\n      settlementCycle.value = response?.cycle ?? null;\r\n      settlementBills.value = ensureArray<any>(response?.bills).map(normalizeSettlementBill);\r\n      settlementHasReminder.value = Boolean(response?.hasPendingReminder);\r\n\r\n      const items = ensureArray<any>(response?.rates)\r\n        .map((item) => ({\r\n          cardType: (item?.cardType ?? '').toString().trim(),\r\n          price: Number(item?.price ?? 0) || 0\r\n        }))\r\n        .filter((item) => item.cardType);\r\n\r\n      settlementRateCache[cacheKey] = items;\r\n      return settlementRateCache[cacheKey];\r\n    } finally {\r\n      loading.settlementRates = false;\r\n    }\r\n  }\r\n\r\n  async function saveSettlementRates(\r\n    rates: SettlementRateItem[],\r\n    cycleDays?: number | null,\r\n    cycleTimeMinutes?: number | null\r\n  ) {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      throw new Error('请选择软件位');\r\n    }\r\n\r\n    const normalized = ensureArray<SettlementRateItem>(rates)\r\n      .map((item) => ({\r\n        cardType: (item?.cardType ?? '').toString().trim(),\r\n        price: Number(item?.price ?? 0) || 0\r\n      }))\r\n      .filter((item) => item.cardType);\r\n\r\n    const targetAgent = selectedSettlementAgent.value?.trim() || '';\r\n\r\n    loading.saveSettlementRates = true;\r\n    try {\r\n      const response = await apiRequest<SettlementRateListResponse>({\r\n        url: '/api/Settlement/upsert',\r\n        method: 'POST',\r\n        data: {\r\n          software,\r\n          rates: normalized,\r\n          targetAgent: targetAgent || undefined,\r\n          cycleDays: typeof cycleDays === 'number' ? cycleDays : undefined,\r\n          cycleTimeMinutes:\r\n            typeof cycleTimeMinutes === 'number' && !Number.isNaN(cycleTimeMinutes)\r\n              ? cycleTimeMinutes\r\n              : undefined\r\n        },\r\n        auth: true,\r\n        disableMock: true\r\n      });\r\n\r\n      const responseTarget = (response?.targetAgent ?? targetAgent ?? '').toString().trim();\r\n      if (responseTarget !== selectedSettlementAgent.value) {\r\n        selectedSettlementAgent.value = responseTarget;\r\n      }\r\n\r\n      const options = ensureArray<any>(response?.agents)\r\n        .map((item) => ({\r\n          username: (item?.username ?? '').toString().trim(),\r\n          displayName: (item?.displayName ?? '').toString().trim(),\r\n          hasPendingReminder: Boolean(item?.hasPendingReminder)\r\n        }))\r\n        .filter((item) => item.username.length > 0);\r\n      if (options.length) {\r\n        settlementAgents.value = options;\r\n      }\r\n\r\n      settlementCycle.value = response?.cycle ?? settlementCycle.value;\r\n      settlementBills.value = ensureArray<any>(response?.bills).map(normalizeSettlementBill);\r\n      settlementHasReminder.value = Boolean(response?.hasPendingReminder);\r\n\r\n      const saved = ensureArray<any>(response?.rates)\r\n        .map((item) => ({\r\n          cardType: (item?.cardType ?? '').toString().trim(),\r\n          price: Number(item?.price ?? 0) || 0\r\n        }))\r\n        .filter((item) => item.cardType);\r\n\r\n      const cacheKey = buildSettlementCacheKey(software, responseTarget || activeSettlementAgent.value);\r\n      settlementRateCache[cacheKey] = saved;\r\n      return settlementRateCache[cacheKey];\r\n    } finally {\r\n      loading.saveSettlementRates = false;\r\n    }\r\n  }\r\n\r\n  async function completeSettlementBill(billId: number, amount: number, note?: string) {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      throw new Error('请选择软件位');\r\n    }\r\n\r\n    const targetAgent = selectedSettlementAgent.value?.trim() || '';\r\n\r\n    const response = await apiRequest<SettlementRateListResponse>({\r\n      url: '/api/Settlement/bill/complete',\r\n      method: 'POST',\r\n      data: {\r\n        software,\r\n        billId,\r\n        amount,\r\n        note,\r\n        targetAgent: targetAgent || undefined\r\n      },\r\n      auth: true,\r\n      disableMock: true\r\n    });\r\n\r\n    settlementCycle.value = response?.cycle ?? settlementCycle.value;\r\n    settlementBills.value = ensureArray<any>(response?.bills).map(normalizeSettlementBill);\r\n    settlementHasReminder.value = Boolean(response?.hasPendingReminder);\r\n\r\n    return settlementBills.value;\r\n  }\r\n\r\n  async function generateCards(payload: { cardType: string; quantity: number; remarks?: string; customPrefix?: string }): Promise<GenerateCardsResponse> {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      throw new Error('请选择软件位');\r\n    }\r\n\r\n    const data = {\r\n      software,\r\n      cardType: payload.cardType,\r\n      quantity: payload.quantity,\r\n      remarks: payload.remarks ?? '',\r\n      ...(payload.customPrefix ? { customPrefix: payload.customPrefix } : {})\r\n    };\r\n\r\n    const response = await apiRequest<GenerateCardsResponse>({\r\n      url: '/api/Card/generateCards',\r\n      method: 'POST',\r\n      data,\r\n      auth: true,\r\n      disableMock: true\r\n    });\r\n\r\n    await loadCardKeys({ page: cardFilters.page, limit: cardFilters.limit });\r\n    return response;\r\n  }\r\n\r\n  async function updateCardStatus(mutation: CardStatusMutation) {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      throw new Error('请选择软件位');\r\n    }\r\n\r\n    const actionMap: Record<CardStatusMutation['action'], string> = {\r\n      enable: 'enableCard',\r\n      disable: 'disableCard',\r\n      unban: 'enableCardWithBanTimeReturn'\r\n    };\r\n\r\n    const action = actionMap[mutation.action];\r\n    if (!action) {\r\n      throw new Error('不支持的操作');\r\n    }\r\n\r\n    const result = await apiRequest<{ message?: string }>({\r\n      url: `/api/Card/${action}`,\r\n      method: 'POST',\r\n      data: { software, cardKey: mutation.cardKey },\r\n      auth: true,\r\n      disableMock: true\r\n    });\r\n\r\n    await loadCardKeys({ page: cardFilters.page, limit: cardFilters.limit });\r\n    return result?.message ?? '';\r\n  }\r\n\r\n  async function unbindCard(cardKey: string) {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      throw new Error('请选择软件位');\r\n    }\r\n\r\n    const result = await apiRequest<{ message?: string }>({\r\n      url: '/api/Card/unbindCard',\r\n      method: 'POST',\r\n      data: { software, cardKey },\r\n      auth: true,\r\n      disableMock: true\r\n    });\r\n\r\n    await loadCardKeys({ page: cardFilters.page, limit: cardFilters.limit });\r\n    return result?.message ?? '';\r\n  }\r\n\r\n  async function loadAgents(options: AgentSearchFilters = {}) {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      agents.value = [];\r\n      agentTotal.value = 0;\r\n      return;\r\n    }\r\n\r\n    const nextFilters: AgentSearchFilters = {\r\n      ...agentFilters,\r\n      ...options\r\n    };\r\n\r\n    nextFilters.page = nextFilters.page && nextFilters.page > 0 ? nextFilters.page : 1;\r\n    nextFilters.limit = nextFilters.limit && nextFilters.limit > 0 ? nextFilters.limit : 50;\r\n    nextFilters.keyword = (nextFilters.keyword ?? '').trim();\r\n\r\n    Object.assign(agentFilters, nextFilters);\r\n\r\n    const page = agentFilters.page ?? 1;\r\n    const limit = agentFilters.limit ?? 50;\r\n    const keyword = (agentFilters.keyword ?? '').trim();\r\n\r\n    loading.agents = true;\r\n    try {\r\n      const response = await apiRequest<{ data: any[]; total: number }>({\r\n        url: '/api/Agent/getSubAgentList',\r\n        method: 'POST',\r\n        data: { software, page, limit, keyword, searchType: 1 },\r\n        auth: true,\r\n        disableMock: true\r\n      });\r\n      const items = ensureArray<any>(response?.data);\r\n      agents.value = items.map(transformAgent);\r\n      agentTotal.value = Number(response?.total ?? items.length ?? 0);\r\n    } finally {\r\n      loading.agents = false;\r\n    }\r\n  }\r\n\r\n  async function toggleAgentStatus(payload: AgentStatusMutation) {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      throw new Error('请选择软件位');\r\n    }\r\n\r\n    const usernames = ensureArray<string>(payload.usernames)\r\n      .map((item) => item.trim())\r\n      .filter((item) => item.length > 0);\r\n\r\n    if (!usernames.length) {\r\n      throw new Error('请选择代理');\r\n    }\r\n\r\n    const path = payload.enable ? 'enableAgent' : 'disableAgent';\r\n    const result = await apiRequest<{ message?: string }>({\r\n      url: `/api/Agent/${path}`,\r\n      method: 'POST',\r\n      data: { software, username: usernames },\r\n      auth: true,\r\n      disableMock: true\r\n    });\r\n\r\n    await loadAgents({ page: agentFilters.page, limit: agentFilters.limit, keyword: agentFilters.keyword });\r\n    return result?.message ?? '';\r\n  }\r\n\r\n  async function deleteAgents(usernames: string[]) {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      throw new Error('请选择软件位');\r\n    }\r\n\r\n    const targets = ensureArray<string>(usernames)\r\n      .map((item) => item.trim())\r\n      .filter((item) => item.length > 0);\r\n\r\n    if (!targets.length) {\r\n      throw new Error('请选择代理');\r\n    }\r\n\r\n    const result = await apiRequest<{ message?: string }>({\r\n      url: '/api/Agent/deleteSubAgent',\r\n      method: 'POST',\r\n      data: { software, username: targets },\r\n      auth: true,\r\n      disableMock: true\r\n    });\r\n\r\n    await loadAgents({ page: agentFilters.page, limit: agentFilters.limit, keyword: agentFilters.keyword });\r\n    return result?.message ?? '';\r\n  }\r\n\r\n  async function createAgent(payload: AgentCreatePayload) {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      throw new Error('请选择软件位');\r\n    }\r\n\r\n    const data = {\r\n      software,\r\n      username: payload.username,\r\n      password: payload.password,\r\n      initialBalance: Number(payload.balance ?? 0),\r\n      initialTimeStock: Number(payload.timeStock ?? 0),\r\n      parities: Number(payload.parities ?? 100),\r\n      totalParities: Number(payload.totalParities ?? payload.parities ?? 100),\r\n      remark: payload.remarks ?? '',\r\n      cardTypes: ensureArray<string>(payload.cardTypes)\r\n    };\r\n\r\n    const result = await apiRequest<{ message?: string }>({\r\n      url: '/api/Agent/createSubAgent',\r\n      method: 'POST',\r\n      data,\r\n      auth: true,\r\n      disableMock: true\r\n    });\r\n\r\n    await loadAgents({ page: 1, limit: agentFilters.limit, keyword: agentFilters.keyword });\r\n    return result?.message ?? '';\r\n  }\r\n\r\n  async function adjustAgentBalance(payload: AgentAdjustBalancePayload) {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      throw new Error('请选择软件位');\r\n    }\r\n\r\n    const data = {\r\n      software,\r\n      username: payload.username,\r\n      balance: Number(payload.balance ?? 0),\r\n      timeStock: Number(payload.timeStock ?? 0)\r\n    };\r\n\r\n    const result = await apiRequest<{ message?: string }>({\r\n      url: '/api/Agent/addMoney',\r\n      method: 'POST',\r\n      data,\r\n      auth: true,\r\n      disableMock: true\r\n    });\r\n\r\n    await loadAgents({ page: agentFilters.page, limit: agentFilters.limit, keyword: agentFilters.keyword });\r\n    return result?.message ?? '';\r\n  }\r\n\r\n  async function updateAgentRemark(payload: AgentUpdateRemarkPayload) {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      throw new Error('请选择软件位');\r\n    }\r\n\r\n    const result = await apiRequest<{ message?: string }>({\r\n      url: '/api/Agent/updateAgentRemark',\r\n      method: 'POST',\r\n      data: { software, username: payload.username, remark: payload.remark ?? '' },\r\n      auth: true,\r\n      disableMock: true\r\n    });\r\n\r\n    await loadAgents({ page: agentFilters.page, limit: agentFilters.limit, keyword: agentFilters.keyword });\r\n    return result?.message ?? '';\r\n  }\r\n\r\n  async function updateAgentPassword(payload: AgentUpdatePasswordPayload) {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      throw new Error('请选择软件位');\r\n    }\r\n\r\n    const result = await apiRequest<{ message?: string }>({\r\n      url: '/api/Agent/updateAgentPassword',\r\n      method: 'POST',\r\n      data: { software, username: payload.username, newPassword: payload.password },\r\n      auth: true,\r\n      disableMock: true\r\n    });\r\n\r\n    return result?.message ?? '';\r\n  }\r\n\r\n  async function assignAgentCardTypes(payload: AgentAssignCardTypesPayload) {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      throw new Error('请选择软件位');\r\n    }\r\n\r\n    const result = await apiRequest<{ message?: string }>({\r\n      url: '/api/Agent/setAgentCardType',\r\n      method: 'POST',\r\n      data: { software, username: payload.username, cardTypes: ensureArray<string>(payload.cardTypes) },\r\n      auth: true,\r\n      disableMock: true\r\n    });\r\n\r\n    return result?.message ?? '';\r\n  }\r\n\r\n  async function loadAgentCardTypes(username: string) {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      throw new Error('请选择软件位');\r\n    }\r\n\r\n    const response = await apiRequest<{ cardTypes?: string[] }>({\r\n      url: '/api/Agent/getAgentCardType',\r\n      method: 'POST',\r\n      data: { software, username },\r\n      auth: true,\r\n      disableMock: true\r\n    });\r\n\r\n    return ensureArray<string>(response?.cardTypes);\r\n  }\r\n\r\n  async function runSalesQuery(filters: SalesQueryFilters = {}) {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      throw new Error('请选择软件位');\r\n    }\r\n\r\n    loading.sales = true;\r\n    try {\r\n      const payload: Record<string, unknown> = {\r\n        software,\r\n        includeDescendants: filters.includeDescendants ?? true\r\n      };\r\n\r\n      if (filters.cardType) {\r\n        payload.cardTypes = [filters.cardType];\r\n      }\r\n      if (filters.status) {\r\n        payload.status = filters.status;\r\n      }\r\n      if (filters.agent) {\r\n        payload.whomList = [filters.agent];\r\n      }\r\n      if (filters.startTime) {\r\n        payload.startTime = filters.startTime;\r\n      }\r\n      if (filters.endTime) {\r\n        payload.endTime = filters.endTime;\r\n      }\r\n\r\n      const response = await apiRequest<SalesQueryResultPayload>({\r\n        url: '/api/Card/countActivatedCards',\r\n        method: 'POST',\r\n        data: payload,\r\n        auth: true,\r\n        disableMock: true\r\n      });\r\n\r\n      const normalizedFilters: SalesQueryFilters = {\r\n        includeDescendants: filters.includeDescendants ?? true,\r\n        cardType: filters.cardType,\r\n        status: filters.status,\r\n        agent: filters.agent,\r\n        startTime: filters.startTime,\r\n        endTime: filters.endTime\r\n      };\r\n      dashboard.salesFilters = normalizedFilters;\r\n      dashboard.salesResult = transformSalesResult(response);\r\n      return dashboard.salesResult;\r\n    } finally {\r\n      loading.sales = false;\r\n    }\r\n  }\r\n\r\n  function clearSalesResult(nextFilters?: Partial<SalesQueryFilters>) {\r\n    dashboard.salesResult = { count: 0, cards: [], settlements: [], totalAmount: 0 };\r\n    dashboard.salesFilters = {\r\n      includeDescendants: nextFilters?.includeDescendants ?? true,\r\n      cardType: nextFilters?.cardType,\r\n      status: nextFilters?.status,\r\n      agent: nextFilters?.agent,\r\n      startTime: nextFilters?.startTime,\r\n      endTime: nextFilters?.endTime\r\n    };\r\n  }\r\n\r\n  async function loadBlacklistLogs(limit = 200) {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      blacklistLogs.value = [];\r\n      return [];\r\n    }\r\n\r\n    loading.blacklistLogs = true;\r\n    try {\r\n      const response = await apiRequest<{ items?: any[] }>({\r\n        url: `/api/Blacklist/logs?limit=${encodeURIComponent(limit)}`,\r\n        method: 'GET',\r\n        auth: true,\r\n        disableMock: true\r\n      });\r\n      const items = ensureArray<any>(response?.items);\r\n      const filtered = items\r\n        .filter((item) => matchesSoftware(item?.software ?? item?.Software, software))\r\n        .map(transformBlacklistLog);\r\n      blacklistLogs.value = filtered;\r\n      const latestRaw = filtered.length > 0 ? filtered[0]?.timestamp ?? '' : '';\r\n      const normalizedLatest = normalizeStorageValue(latestRaw);\r\n      blacklistLatestBySoftware[software] = normalizedLatest && normalizedLatest !== '-' ? normalizedLatest : '';\r\n      return filtered;\r\n    } finally {\r\n      loading.blacklistLogs = false;\r\n    }\r\n  }\r\n\r\n  function markBlacklistLogsSeen(software?: string) {\r\n    const target = software ?? selectedSoftware.value;\r\n    if (!target) {\r\n      return;\r\n    }\r\n    const latest = blacklistLatestBySoftware[target] ?? '';\r\n    if (!latest) {\r\n      setStoredBlacklistTimestamp(target, '');\r\n      return;\r\n    }\r\n    setStoredBlacklistTimestamp(target, latest);\r\n  }\r\n\r\n  async function loadBlacklistMachines() {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      blacklistMachines.value = [];\r\n      return [];\r\n    }\r\n\r\n    loading.blacklistMachines = true;\r\n    try {\r\n      const response = await apiRequest<{ items?: any[] }>({\r\n        url: '/api/Blacklist/machines',\r\n        method: 'GET',\r\n        auth: true,\r\n        disableMock: true\r\n      });\r\n      const items = ensureArray<any>(response?.items);\r\n      const filtered = items\r\n        .filter((item) => matchesSoftware(item?.software ?? item?.Software, software))\r\n        .map(transformBlacklistMachine);\r\n      blacklistMachines.value = filtered;\r\n      return filtered;\r\n    } finally {\r\n      loading.blacklistMachines = false;\r\n    }\r\n  }\r\n\r\n  async function createBlacklistMachine(payload: BlacklistMachineCreatePayload) {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      throw new Error('请选择软件位');\r\n    }\r\n\r\n    await apiRequest<{ message?: string }>({\r\n      url: '/api/Blacklist/machines',\r\n      method: 'POST',\r\n      data: { software, value: payload.value, type: payload.type, remarks: payload.remarks ?? '' },\r\n      auth: true,\r\n      disableMock: true\r\n    });\r\n\r\n    return loadBlacklistMachines();\r\n  }\r\n\r\n  async function deleteBlacklistMachines(values: string[]) {\r\n    await ensureReady();\r\n    const targets = ensureArray<string>(values)\r\n      .map((item) => item.trim())\r\n      .filter((item) => item.length > 0);\r\n\r\n    if (!targets.length) {\r\n      throw new Error('请选择要删除的记录');\r\n    }\r\n\r\n    await apiRequest<{ message?: string }>({\r\n      url: '/api/Blacklist/machines/delete',\r\n      method: 'POST',\r\n      data: { values: targets },\r\n      auth: true,\r\n      disableMock: true\r\n    });\r\n\r\n    return loadBlacklistMachines();\r\n  }\r\n\r\n  async function loadLinkRecords(options: { page?: number; limit?: number } = {}) {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      throw new Error('请选择软件位');\r\n    }\r\n    const page = options.page ?? 1;\r\n    const limit = options.limit ?? DEFAULT_LINK_PAGE_SIZE;\r\n\r\n    loading.links = true;\r\n    try {\r\n      const response = await apiRequest<LanzouLinkListResponse>({\r\n        url: '/api/LinkAudit/listLanzouLinks',\r\n        method: 'POST',\r\n        data: { page, limit, software },\r\n        auth: true,\r\n        disableMock: true\r\n      });\r\n      const items = ensureArray<LanzouLinkRecordDto>(response?.items);\r\n      linkRecords.value = items.map(transformLink);\r\n      linkTotal.value = Number(response?.total ?? items.length ?? 0);\r\n    } finally {\r\n      loading.links = false;\r\n    }\r\n  }\r\n\r\n  async function loadChatContacts(force = false) {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      chatContacts.value = [];\r\n      lastLoadedContactSoftware.value = '';\r\n      return [];\r\n    }\r\n\r\n    if (!force && chatContacts.value.length > 0 && lastLoadedContactSoftware.value === software) {\r\n      return chatContacts.value;\r\n    }\r\n\r\n    loading.chatContacts = true;\r\n    try {\r\n      const response = await apiRequest<ChatContactDto[]>({\r\n        url: `/api/Chat/contacts?software=${encodeURIComponent(software)}`,\r\n        method: 'GET',\r\n        auth: true,\r\n        disableMock: true\r\n      });\r\n      chatContacts.value = ensureArray(response).map(transformContact);\r\n      lastLoadedContactSoftware.value = software;\r\n      return chatContacts.value;\r\n    } finally {\r\n      loading.chatContacts = false;\r\n    }\r\n  }\r\n\r\n  async function loadChatSessions() {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      chatSessions.value = [];\r\n      return;\r\n    }\r\n\r\n    loading.chat = true;\r\n    try {\r\n      const response = await apiRequest<ChatConversationDto[]>({\r\n        url: `/api/Chat/conversations?software=${encodeURIComponent(software)}`,\r\n        method: 'GET',\r\n        auth: true,\r\n        disableMock: true\r\n      });\r\n      const currentUser = session.value?.username ?? '';\r\n      chatSessions.value = ensureArray(response).map((conversation) => transformConversation(conversation, currentUser));\r\n    } finally {\r\n      loading.chat = false;\r\n    }\r\n  }\r\n\r\n  async function loadChatMessages(conversationId: string) {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software || !conversationId) {\r\n      return [];\r\n    }\r\n\r\n    loading.chatMessages = true;\r\n    try {\r\n      const response = await apiRequest<ChatMessagesResponse>({\r\n        url: `/api/Chat/messages?software=${encodeURIComponent(software)}&conversationId=${encodeURIComponent(conversationId)}`,\r\n        method: 'GET',\r\n        auth: true,\r\n        disableMock: true\r\n      });\r\n      const currentUser = session.value?.username ?? '';\r\n      const messages = transformMessages(response?.messages ?? [], currentUser);\r\n      const target = chatSessions.value.find((sessionItem) => sessionItem.id === conversationId);\r\n      if (target) {\r\n        target.messages = messages;\r\n        target.preview = response?.conversation?.lastMessagePreview || target.preview;\r\n        target.updatedAt = formatDateTime(response?.conversation?.updatedAt || target.updatedAt);\r\n        target.unread = response?.conversation?.unreadCount ?? target.unread;\r\n      }\r\n      return messages;\r\n    } finally {\r\n      loading.chatMessages = false;\r\n    }\r\n  }\r\n\r\n  async function sendChatMessage(conversationId: string, message: string, options: ChatMessageSendOptions = {}) {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software || !conversationId) {\r\n      return null;\r\n    }\r\n\r\n    const type = options.type ?? 'text';\r\n    const trimmedMessage = (message ?? '').toString().trim();\r\n    const caption = (options.caption ?? '').toString().trim();\r\n\r\n    if (type === 'text' && !trimmedMessage) {\r\n      return null;\r\n    }\r\n    if (type === 'image' && !options.mediaBase64) {\r\n      throw new Error('缺少图片数据');\r\n    }\r\n\r\n    const payload: Record<string, unknown> = {\r\n      software,\r\n      conversationId,\r\n      message: type === 'image' ? caption : trimmedMessage\r\n    };\r\n\r\n    if (type && type !== 'text') {\r\n      payload.messageType = type;\r\n    }\r\n    if (options.mediaBase64) {\r\n      payload.mediaBase64 = options.mediaBase64;\r\n    }\r\n    if (options.mediaName) {\r\n      payload.mediaName = options.mediaName;\r\n    }\r\n\r\n    const response = await apiRequest<ChatMessagesResponse>({\r\n      url: '/api/Chat/send',\r\n      method: 'POST',\r\n      data: payload,\r\n      auth: true,\r\n      disableMock: true\r\n    });\r\n\r\n    const currentUser = session.value?.username ?? '';\r\n    const target = chatSessions.value.find((sessionItem) => sessionItem.id === conversationId);\r\n    if (target) {\r\n      target.messages = transformMessages(response?.messages ?? [], currentUser);\r\n      target.preview = response?.conversation?.lastMessagePreview || target.preview;\r\n      target.updatedAt = formatDateTime(response?.conversation?.updatedAt || target.updatedAt);\r\n      target.unread = response?.conversation?.unreadCount ?? target.unread;\r\n    }\r\n\r\n    return response;\r\n  }\r\n\r\n  async function createDirectConversation(targetUser: string, message: string) {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      throw new Error('请选择软件位');\r\n    }\r\n    if (!targetUser) {\r\n      throw new Error('请选择聊天对象');\r\n    }\r\n    if (!message.trim()) {\r\n      throw new Error('请输入消息内容');\r\n    }\r\n\r\n    const payload = {\r\n      software,\r\n      targetUser,\r\n      message: message.trim()\r\n    };\r\n\r\n    const response = await apiRequest<ChatMessagesResponse>({\r\n      url: '/api/Chat/send',\r\n      method: 'POST',\r\n      data: payload,\r\n      auth: true,\r\n      disableMock: true\r\n    });\r\n\r\n    const currentUser = session.value?.username ?? '';\r\n    const conversation = transformConversation(response?.conversation, currentUser);\r\n    conversation.messages = transformMessages(response?.messages ?? [], currentUser);\r\n\r\n    const existingIndex = chatSessions.value.findIndex((item) => item.id === conversation.id);\r\n    if (existingIndex >= 0) {\r\n      chatSessions.value.splice(existingIndex, 1, conversation);\r\n    } else {\r\n      chatSessions.value.unshift(conversation);\r\n    }\r\n\r\n    return conversation;\r\n  }\r\n\r\n  async function createGroupConversation(\r\n    groupName: string,\r\n    members: string[],\r\n    initialMessage?: { content?: string; options?: ChatMessageSendOptions }\r\n  ) {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      throw new Error('请选择软件位');\r\n    }\r\n\r\n    const name = groupName.trim();\r\n    if (!name) {\r\n      throw new Error('请输入群聊名称');\r\n    }\r\n\r\n    const participantList = ensureArray<string>(members)\r\n      .map((item) => item.trim())\r\n      .filter((item) => item.length > 0);\r\n\r\n    if (!participantList.length) {\r\n      throw new Error('请至少选择一位成员');\r\n    }\r\n\r\n    const response = await apiRequest<ChatConversationDto>({\r\n      url: '/api/Chat/groups',\r\n      method: 'POST',\r\n      data: { software, name, participants: participantList },\r\n      auth: true,\r\n      disableMock: true\r\n    });\r\n\r\n    const currentUser = session.value?.username ?? '';\r\n    const conversation = transformConversation(response, currentUser);\r\n    const existingIndex = chatSessions.value.findIndex((item) => item.id === conversation.id);\r\n    if (existingIndex >= 0) {\r\n      chatSessions.value.splice(existingIndex, 1, conversation);\r\n    } else {\r\n      chatSessions.value.unshift(conversation);\r\n    }\r\n\r\n    if (initialMessage?.content || initialMessage?.options?.mediaBase64) {\r\n      try {\r\n        await sendChatMessage(conversation.id, initialMessage.content ?? '', initialMessage.options ?? {});\r\n      } catch (error) {\r\n        console.warn('createGroupConversation initial message failed', error);\r\n      }\r\n    }\r\n\r\n    return conversation;\r\n  }\r\n\r\n  async function exportChatHistory(conversationId: string) {\r\n    await ensureReady();\r\n    const software = selectedSoftware.value;\r\n    if (!software) {\r\n      throw new Error('请选择软件位');\r\n    }\r\n    if (!conversationId) {\r\n      throw new Error('请选择会话');\r\n    }\r\n\r\n    const response = await apiRequest<ChatMessagesResponse>({\r\n      url: `/api/Chat/messages?software=${encodeURIComponent(software)}&conversationId=${encodeURIComponent(conversationId)}&limit=500`,\r\n      method: 'GET',\r\n      auth: true,\r\n      disableMock: true\r\n    });\r\n\r\n    const currentUser = session.value?.username ?? '';\r\n    const target = chatSessions.value.find((sessionItem) => sessionItem.id === conversationId);\r\n    if (target) {\r\n      target.messages = transformMessages(response?.messages ?? [], currentUser);\r\n      target.preview = response?.conversation?.lastMessagePreview || target.preview;\r\n      target.updatedAt = formatDateTime(response?.conversation?.updatedAt || target.updatedAt);\r\n      target.unread = response?.conversation?.unreadCount ?? target.unread;\r\n    }\r\n\r\n    const conversation = response?.conversation;\r\n    const participants = ensureArray<string>(conversation?.participants);\r\n    const title = conversation?.isGroup\r\n      ? conversation?.groupName || '群聊'\r\n      : participants.find((name) => name && name !== currentUser) || participants[0] || conversationId;\r\n\r\n    const lines: string[] = [];\r\n    lines.push(`会话：${title}`);\r\n    lines.push(`成员：${participants.join('、')}`);\r\n    lines.push(`导出时间：${formatDateTime(new Date().toISOString())}`);\r\n    lines.push('');\r\n\r\n    ensureArray<ChatMessageDto>(response?.messages).forEach((message) => {\r\n      const timestamp = formatDateTime(message.timestamp);\r\n      const sender = message.sender === currentUser ? `${message.sender}(我)` : message.sender;\r\n      const content = message.type === 'image' ? `[图片] ${message.content}` : message.content;\r\n      lines.push(`[${timestamp}] ${sender}: ${content}`.trim());\r\n      if (message.caption) {\r\n        lines.push(`  说明：${message.caption}`);\r\n      }\r\n    });\r\n\r\n    const filename = `${title || 'chat'}-${Date.now()}.txt`;\r\n    return {\r\n      filename,\r\n      content: lines.join('\\n')\r\n    };\r\n  }\r\n\r\n  async function loadVerification(\r\n    cardKey?: string,\r\n    context?: { software: string; softwareCode?: string; agentAccount?: string; gateway?: string }\r\n  ) {\r\n    loading.verification = true;\r\n    try {\r\n      if (!cardKey) {\r\n        verification.value = null;\r\n        return null;\r\n      }\r\n      if (!context || !context.software) {\r\n        throw new Error('缺少软件位信息，无法验证卡密');\r\n      }\r\n      if (!context.softwareCode) {\r\n        throw new Error('缺少软件码信息，无法验证卡密');\r\n      }\r\n      const response = await apiRequest<CardVerificationResult>({\r\n        url: '/api/card-verification/verify',\r\n        method: 'POST',\r\n        data: {\r\n          cardKey,\r\n          software: context.software,\r\n          softwareCode: context.softwareCode,\r\n          agentAccount: context.agentAccount\r\n        },\r\n        disableMock: true,\r\n        skipProxy: true,\r\n        auth: false\r\n      });\r\n      verification.value = buildVerificationPayload(response);\r\n      return verification.value;\r\n    } finally {\r\n      loading.verification = false;\r\n    }\r\n  }\r\n\r\n  return {\r\n    loading,\r\n    token,\r\n    session,\r\n    profile,\r\n    isSuper,\r\n    softwareList,\r\n    selectedSoftware,\r\n    theme,\r\n    dashboard,\r\n    recentCards,\r\n    cardKeys,\r\n    cardTotal,\r\n    cardTypes,\r\n    cardFilters,\r\n    agents,\r\n    agentTotal,\r\n    agentFilters,\r\n    linkRecords,\r\n    linkTotal,\r\n    chatSessions,\r\n    chatContacts,\r\n    chatUnreadCount,\r\n    settlementRates,\r\n    settlementAgents,\r\n    selectedSettlementAgent,\r\n    activeSettlementAgent,\r\n    settlementCycle,\r\n    settlementBills,\r\n    settlementHasReminder,\r\n    verification,\r\n    systemStatus,\r\n    blacklistLogs,\r\n    blacklistMachines,\r\n    hasNewBlacklistLogs,\r\n    markBlacklistLogsSeen,\r\n    ensureReady,\r\n    bootstrap,\r\n    login,\r\n    logout,\r\n    handleUnauthorized,\r\n    setTheme,\r\n    setSelectedSoftware,\r\n    setSelectedSettlementAgent,\r\n    loadDashboard,\r\n    loadCardKeys,\r\n    loadCardTypes,\r\n    loadAgents,\r\n    loadSettlementRates,\r\n    saveSettlementRates,\r\n    completeSettlementBill,\r\n    updateCardStatus,\r\n    unbindCard,\r\n    toggleAgentStatus,\r\n    deleteAgents,\r\n    createAgent,\r\n    adjustAgentBalance,\r\n    updateAgentRemark,\r\n    updateAgentPassword,\r\n    assignAgentCardTypes,\r\n    loadAgentCardTypes,\r\n    runSalesQuery,\r\n    clearSalesResult,\r\n    loadBlacklistLogs,\r\n    loadBlacklistMachines,\r\n    createBlacklistMachine,\r\n    deleteBlacklistMachines,\r\n    loadLinkRecords,\r\n    loadChatContacts,\r\n    loadChatSessions,\r\n    loadChatMessages,\r\n    sendChatMessage,\r\n    createDirectConversation,\r\n    createGroupConversation,\r\n    exportChatHistory,\r\n    generateCards,\r\n    loadVerification\r\n  };\r\n});\r\n"],"names":["total","uni","formatDateTime","formatTime","formatDate","defineStore","reactive","ref","getTokenValue","getSelectedSoftwareDisplayName","getThemePreference","computed","profile","watch","clearToken","setSelectedSoftwareName","setThemePreference","refreshBaseURL","usePlatformStore","apiRequest","getSelectedSoftwareName","setSelectedSoftwareDisplayName","clearSelectedSoftwareDisplayName","setTokenValue"],"mappings":";;;;;;AAsFA,MAAM,yBAAyB;AAC/B,MAAM,yBAAyB;AAI/B,SAAS,kBAAkB,OAAyE;AAC5F,QAAA,cAAc,SAAS,IAAI,KAAK;AACtC,MAAI,CAAC,YAAY;AACf,WAAO,EAAE,QAAQ,WAAW,MAAM,KAAK;AAAA,EACzC;AACI,MAAA,CAAC,MAAM,MAAM,UAAU,WAAW,GAAG,EAAE,SAAS,UAAU,GAAG;AAC/D,WAAO,EAAE,QAAQ,WAAW,MAAM,cAAc,KAAK;AAAA,EACvD;AACI,MAAA,CAAC,MAAM,MAAM,YAAY,KAAK,IAAI,EAAE,SAAS,UAAU,GAAG;AAC5D,WAAO,EAAE,QAAQ,YAAY,MAAM,WAAW;AAAA,EAChD;AACA,SAAO,EAAE,QAAQ,WAAW,MAAM,WAAW;AAC/C;AAEA,SAAS,YAAe,OAAqB;AACvC,MAAA,MAAM,QAAQ,KAAK,GAAG;AACjB,WAAA;AAAA,EACT;AACA,SAAO;AACT;AAEA,SAAS,kBAAkB,KAAuB;AAChD,SAAO,IACJ,MAAM,WAAW,EACjB,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC,EACzB,OAAO,CAAC,SAAS,KAAK,SAAS,CAAC;AACrC;AAEA,SAAS,oBAAoB,QAAsD;AAC7E,MAAA,CAAC,OAAO,QAAQ;AAClB,WAAO,EAAE,OAAO,GAAG,KAAK,EAAE;AAAA,EAC5B;AACA,SAAO,OAAO;AAAA,IACZ,CAAC,KAAK,UAAU;AACd,YAAM,QAAQ,OAAO,MAAM,SAAS,CAAC;AACjC,UAAA,OAAO,SAAS,KAAK,GAAG;AAC1B,YAAI,SAAS;AACT,YAAA,QAAQ,IAAI,KAAK;AACnB,cAAI,MAAM;AAAA,QACZ;AAAA,MACF;AACO,aAAA;AAAA,IACT;AAAA,IACA,EAAE,OAAO,GAAG,KAAK,EAAE;AAAA,EAAA;AAEvB;AAEA,SAAS,0BAA0B,OAA6D;AAC9F,MAAI,CAAC,OAAO;AACH,WAAA,EAAE,YAAY,IAAI,QAAQ,CAAA,GAAI,OAAO;EAC9C;AAEM,QAAA,gBAAgB,YAAoB,MAAM,UAAU;AACpD,QAAA,SAAS,YAAY,MAAM,MAAM;AACvC,QAAM,aAAa,cAAc,SAC7B,cAAc,IAAI,CAAC,SAAS,KAAK,KAAM,CAAA,EAAE,OAAO,CAAC,SAAS,KAAK,SAAS,CAAC,IACzE,OAAO,IAAI,CAAC,WAAU,6BAAM,SAAQ,IAAI,SAAS,EAAE,KAAK,CAAC,EAAE,OAAO,CAAC,SAAS,KAAK,SAAS,CAAC;AAE/F,QAAM,uBAAuB,WAAW,SAAS,aAAa,CAAA;AAC9D,QAAM,SAAS,YAAY,MAAM,MAAM,EAAE,IAAI,CAAC,SAAS;AAC/C,UAAA,SAAQ,6BAAM,iBAAe,6BAAM,UAAS,IAAI,SAAA,EAAW,KAAA,KAAU;AACrE,UAAA,0BAAU;AAChB,gBAAY,6BAAM,MAAM,EAAE,QAAQ,CAAC,UAAU;AAC3C,YAAM,QAAO,+BAAO,SAAQ,IAAI,SAAA,EAAW;AAC3C,UAAI,CAAC;AAAK;AACV,YAAM,QAAQ,QAAO,+BAAO,UAAS,CAAC;AACtC,UAAI,IAAI,KAAK,OAAO,SAAS,KAAK,IAAI,QAAQ,CAAC;AAAA,IAAA,CAChD;AACK,UAAA,SAAS,qBAAqB,IAAI,CAAC,aAAa,IAAI,IAAI,QAAQ,KAAK,CAAC;AACtEA,UAAAA,SAAQ,OAAO,OAAO,CAAC,KAAK,UAAU,MAAM,OAAO,CAAC;AAC1D,WAAO,EAAE,MAAM,QAAQ,OAAAA,OAAM;AAAA,EAAA,CAC9B;AAEK,QAAA,QAAQ,OAAO,OAAO,CAAC,KAAK,SAAS,MAAM,KAAK,OAAO,CAAC;AAC9D,SAAO,EAAE,YAAY,sBAAsB,QAAQ,MAAM;AAC3D;AAEA,SAAS,sBAAsB,OAA+B;AAC5D,UAAQ,SAAS,IAAI,SAAW,EAAA,KAAA,EAAO;AACzC;AASA,SAAS,gBAAgB,OAAgB,UAA2B;AAClE,MAAI,CAAC;AAAiB,WAAA;AACf,SAAA,sBAAsB,KAAK,EAAE,YAAA,MAAkB,sBAAsB,QAAQ,EAAE;AACxF;AAEA,MAAM,2BAA2B;AAEjC,SAAS,yBAAyB,UAA0B;AACnD,SAAA,GAAG,wBAAwB,GAAG,QAAQ;AAC/C;AAEA,SAAS,sBAAsB,OAAwB;AACjD,MAAA,OAAO,UAAU,UAAU;AACtB,WAAA;AAAA,EACT;AACA,MAAI,OAAO,UAAU,YAAY,OAAO,SAAS,KAAK,GAAG;AACvD,WAAO,MAAM;EACf;AACA,MAAI,SAAS,MAAM;AACb,QAAA;AACF,aAAO,OAAO,KAAK;AAAA,aACZ,OAAO;AACdC,oBAAA,MAAa,MAAA,QAAA,wBAAA,qCAAqC,KAAK;AAAA,IACzD;AAAA,EACF;AACO,SAAA;AACT;AAEA,SAAS,qBAAqB,MAAqC;AACjE,QAAM,QAAQ,YAAiB,6BAAM,KAAK,EAAE,IAAI,CAAC,UAAU;AAAA,IACzD,QAAO,6BAAM,UAAQ,6BAAM,iBAAe,6BAAM,QAAO,IAAI,SAAS;AAAA,IACpE,cAAcC,WAAe,gBAAA,6BAAM,kBAAgB,6BAAM,mBAAiB,6BAAM,cAAa;AAAA,EAC7F,EAAA;AACF,QAAM,QAAQ,QAAO,6BAAM,UAAS,MAAM,UAAU,CAAC;AACrD,QAAM,cAAc,YAAiB,6BAAM,WAAW,EACnD,IAAI,CAAC,UAAU;AAAA,IACd,YAAW,6BAAM,aAAY,IAAI,SAAS;AAAA,IAC1C,OAAO,QAAO,6BAAM,UAAS,CAAC,KAAK;AAAA,IACnC,OAAO,QAAO,6BAAM,UAAS,CAAC,KAAK;AAAA,IACnC,OAAO,QAAO,6BAAM,UAAS,CAAC,KAAK;AAAA,EAAA,EACnC,EACD,OAAO,CAAC,SAAS,KAAK,QAAQ;AACjC,QAAM,iBAAiB,QAAO,6BAAM,gBAAe,CAAC;AACpD,QAAM,cAAc,OAAO,SAAS,cAAc,IAC9C,iBACA,YAAY,OAAO,CAAC,KAAK,SAAS,MAAM,KAAK,OAAO,CAAC;AAClD,SAAA;AAAA,IACL,OAAO,OAAO,SAAS,KAAK,IAAI,QAAQ,MAAM;AAAA,IAC9C;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAEJ;AAEA,SAAS,wBAAwB,KAA8B;AAC7D,QAAM,aAAa,YAAiB,2BAAK,UAAU,EAChD,IAAI,CAAC,UAAU;AAAA,IACd,SAAQ,6BAAM,UAAS,IAAI,WAAW,KAAK;AAAA,IAC3C,eAAc,6BAAM,gBAAe,IAAI,WAAW,KAAK;AAAA,IACvD,OAAO,QAAO,6BAAM,UAAS,CAAC,KAAK;AAAA,IACnC,QAAQ,QAAO,6BAAM,WAAU,CAAC,KAAK;AAAA,EAAA,EACrC,EACD,OAAO,CAAC,SAAS,KAAK,MAAM,SAAS,CAAC;AAElC,SAAA;AAAA,IACL,IAAI,QAAO,2BAAK,OAAM,CAAC,KAAK;AAAA,IAC5B,iBAAgB,2BAAK,kBAAiB,IAAI,SAAS;AAAA,IACnD,eAAc,2BAAK,gBAAe,IAAI,SAAS;AAAA,IAC/C,QAAQ,QAAO,2BAAK,WAAU,CAAC,KAAK;AAAA,IACpC,kBACE,2BAAK,oBAAmB,OACpB,UACC,MAAM;AACC,YAAA,QAAQ,OAAO,IAAI,eAAe;AACxC,aAAO,OAAO,SAAS,KAAK,KAAK,QAAQ,IAAI,QAAQ;AAAA,IAAA,GACpD;AAAA,IACT,WAAW,QAAQ,2BAAK,SAAS;AAAA,IACjC,eAAc,2BAAK,kBAAgB,2BAAK,iBAAgB;AAAA,IACxD,QAAO,2BAAK,SAAQ,IAAI,SAAc,KAAA;AAAA,IACtC;AAAA,EAAA;AAEJ;AAEA,SAAS,sBAAsB,KAA4B;AAClD,SAAA;AAAA,IACL,WAAWA,WAAAA,gBAAe,2BAAK,eAAa,2BAAK,UAAS;AAAA,IAC1D,UAAU,uBAAsB,2BAAK,cAAY,2BAAK,SAAQ;AAAA,IAC9D,MAAK,2BAAK,QAAM,2BAAK,OAAM,IAAI,SAAS;AAAA,IACxC,QAAO,2BAAK,UAAQ,2BAAK,SAAQ,IAAI,SAAS;AAAA,IAC9C,eAAc,2BAAK,YAAU,2BAAK,WAAU,IAAI,SAAS;AAAA,IACzD,SAAQ,2BAAK,eAAa,2BAAK,cAAa,IAAI,SAAS;AAAA,EAAA;AAE7D;AAEA,SAAS,0BAA0B,KAAgC;AACjE,QAAM,UAAS,2BAAK,WAAS,2BAAK,UAAS,IAAI;AACxC,SAAA;AAAA,IACL;AAAA,IACA,UAAU,uBAAsB,2BAAK,cAAY,2BAAK,SAAQ;AAAA,IAC9D,MAAM,QAAO,2BAAK,UAAQ,2BAAK,SAAQ,CAAC,KAAK;AAAA,IAC7C,WAAU,2BAAK,aAAW,2BAAK,YAAW,IAAI,SAAc,KAAA;AAAA,EAAA;AAEhE;AAEA,SAAS,qBACP,UACA,SACA,MACA,OACyB;AACzB,QAAM,UAAmC,EAAE,UAAU,MAAM,MAAM;AACjE,QAAM,SAAS,QAAQ,SAAS,IAAI,KAAK;AACzC,MAAI,OAAO;AACT,YAAQ,QAAQ;AAChB,YAAQ,qBAAqB;AAAA,EAAA,OACxB;AACG,YAAA,qBAAqB,QAAQ,sBAAsB;AAAA,EAC7D;AAEA,MAAI,QAAQ,UAAU,QAAQ,WAAW,IAAI;AAC3C,YAAQ,SAAS,QAAQ;AAAA,EAC3B;AAEA,QAAM,cAAc,QAAQ,WAAW,IAAI,KAAK;AAC1C,QAAA,eAAe,QAAQ,YAAY,QAAQ,SAAS,SAAS,QAAQ,WAAW,kBAAkB,UAAU;AAClH,QAAM,UAAU;AAEhB,MAAI,aAAa,OAAO,QAAQ,eAAe,WAAW,QAAQ,aAAa;AAC/E,MAAI,QAAQ,aAAa,eAAe,KAAK,eAAe,IAAI;AACjD,iBAAA;AAAA,EACf;AACA,MAAI,CAAC,QAAQ,YAAY,aAAa,WAAW,KAAK,QAAQ,KAAK,aAAa,CAAC,CAAC,MAAM,eAAe,KAAK,eAAe,IAAI;AAChH,iBAAA;AAAA,EACf;AACA,UAAQ,aAAa;AAErB,MAAI,WAAqB,CAAA;AACrB,MAAA,eAAe,KAAK,QAAQ,UAAU;AAC7B,eAAA,CAAC,QAAQ,QAAQ;AAAA,EAAA,WACnB,eAAe,GAAG;AAC3B,eAAW,aAAa,OAAO,CAAC,SAAS,QAAQ,KAAK,IAAI,CAAC;AAAA,EAAA,WAClD,eAAe,GAAG;AAChB,eAAA,aAAa,MAAM,GAAG,EAAE;AAAA,EAAA,OAC9B;AACM,eAAA;AAAA,EACb;AAEA,MAAI,QAAQ,aAAa;AACvB,aAAS,KAAK,QAAQ,YAAY,KAAM,CAAA;AAAA,EAC1C;AAEA,MAAI,QAAQ,IAAI;AACd,aAAS,KAAK,QAAQ,GAAG,KAAM,CAAA;AAAA,EACjC;AAEA,aAAW,MAAM,KAAK,IAAI,IAAI,SAAS,OAAO,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC;AAEzE,MAAI,SAAS,QAAQ;AACnB,YAAQ,WAAW;AAAA,EACrB;AAEI,MAAA,QAAQ,YAAY,eAAe,GAAG;AACxC,YAAQ,WAAW,QAAQ;AAAA,EAC7B;AAEA,MAAI,QAAQ,WAAW;AACrB,YAAQ,YAAY,QAAQ;AAAA,EAC9B;AACA,MAAI,QAAQ,SAAS;AACnB,YAAQ,UAAU,QAAQ;AAAA,EAC5B;AAEO,SAAA;AACT;AAEA,SAAS,cAAc,MAA8B;AAC7C,QAAA,MAAM,KAAK,eAAe;AAChC,QAAM,SAAS,KAAK,QAAQ,KAAK,SAAS,IAAI;AAC9C,QAAM,YAAY,KAAK,YAAY,IAAI,KAAK;AAC5C,QAAM,EAAE,QAAQ,KAAA,IAAS,kBAAkB,KAAK,KAAK;AAC/C,QAAA,YAAYA,WAAAA,eAAe,KAAK,WAAW;AACjD,QAAM,cAAcA,WAAAA,eAAe,KAAK,iBAAiB,KAAK,cAAc;AACtE,QAAA,WAAWA,WAAAA,eAAe,KAAK,aAAa;AAClD,QAAM,eAAe,YAAoB,KAAK,YAAY,EACvD,IAAI,CAAC,SAAS,KAAK,KAAM,CAAA,EACzB,OAAO,CAAC,SAAS,KAAK,SAAS,CAAC;AAEnC,MAAI,KAAK,aAAa;AACd,UAAA,YAAY,KAAK,YAAY,KAAK;AACxC,QAAI,aAAa,CAAC,aAAa,SAAS,SAAS,GAAG;AAClD,mBAAa,QAAQ,SAAS;AAAA,IAChC;AAAA,EACF;AAEO,SAAA;AAAA,IACL;AAAA,IACA,OAAO,SAAS;AAAA,IAChB,UAAU,YAAY;AAAA,IACtB;AAAA,IACA,YAAY,SAAS,WAAW,YAAY,OAAO,WAAW,aAAa,OAAO;AAAA,IAClF;AAAA,IACA;AAAA,IACA;AAAA,IACA,IAAI,KAAK,MAAM;AAAA,IACf;AAAA,IACA,QAAQ,KAAK,WAAW;AAAA,EAAA;AAE5B;AAEA,SAAS,qBAAqB,QAA0C;AAClE,MAAA,OAAO,WAAW,WAAW;AAC/B,WAAO,SAAS,YAAY;AAAA,EAC9B;AACI,MAAA,OAAO,WAAW,UAAU;AACvB,WAAA,WAAW,IAAI,YAAY;AAAA,EACpC;AACI,MAAA,OAAO,WAAW,UAAU;AAC9B,UAAM,aAAa,OAAO,KAAK,EAAE,YAAY;AACzC,QAAA,CAAC,MAAM,WAAW,QAAQ,GAAG,EAAE,SAAS,UAAU,GAAG;AAChD,aAAA;AAAA,IACT;AACI,QAAA,CAAC,MAAM,YAAY,SAAS,KAAK,IAAI,EAAE,SAAS,UAAU,GAAG;AACxD,aAAA;AAAA,IACT;AAAA,EACF;AACO,SAAA;AACT;AAEA,SAAS,SAAS,OAAgB,WAAW,GAAG;AACxC,QAAA,UAAU,OAAO,KAAK;AAC5B,SAAO,OAAO,SAAS,OAAO,IAAI,UAAU;AAC9C;AAEA,SAAS,eAAe,KAAyB;AACzC,QAAA,aAAY,2BAAK,cAAY,2BAAK,UAAQ,2BAAK,YAAW,KAAK;AACrE,QAAM,UAAU,UAAS,2BAAK,aAAW,2BAAK,MAAK;AACnD,QAAM,YAAY,UAAS,2BAAK,eAAa,2BAAK,WAAU;AACtD,QAAA,WAAW,SAAS,2BAAK,QAAQ;AACvC,QAAM,gBAAgB,UAAS,2BAAK,mBAAiB,2BAAK,iBAAgB,QAAQ;AAClF,QAAM,WAAU,2BAAK,YAAU,2BAAK,YAAW,IAAI;AACnD,QAAM,aAAY,2BAAK,cAAY,2BAAK,aAAY,IAAI;AACxD,QAAM,YAAY,aAAoB,2BAAK,gBAAc,2BAAK,UAAS,EAAE,IAAI,CAAC,SAAS,KAAK,SAAU,CAAA;AACtG,QAAM,cAAa,2BAAK,cAAaA,WAAAA,eAAe,IAAI,UAAU,IAAI;AAChE,QAAA,SAAS,sBAAqB,2BAAK,YAAU,2BAAK,UAAQ,2BAAK,iBAAe,2BAAK,aAAW,2BAAK,MAAK;AAC9G,QAAM,QAAQ,SAAS,2BAAK,OAAO,CAAC;AAE7B,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAEJ;AAEA,SAAS,iBAAiB,KAAsC;;AAC9D,QAAM,aAAY,2BAAK,aAAY,IAAI,KAAK;AAC5C,QAAM,gBAAe,2BAAK,gBAAe,YAAY,KAAK,WAAW;AACrE,QAAM,UAAS,gCAAK,WAAL,mBAAa,WAAW;AAChC,SAAA;AAAA,IACL;AAAA,IACA,aAAa,eAAe,YAAY;AAAA,IACxC,QAAQ,UAAU;AAAA,EAAA;AAEtB;AAEA,SAAS,oBAAoB,OAA0C;AACrE,MAAI,CAAC,OAAO;AACV,WAAO;EACT;AACO,SAAA;AAAA,IACL,EAAE,KAAK,SAAS,OAAO,QAAQ,OAAO,MAAM,WAAW,WAAW;AAAA,IAClE,EAAE,KAAK,UAAU,OAAO,OAAO,OAAO,MAAM,YAAY,WAAW;AAAA,IACnE,EAAE,KAAK,QAAQ,OAAO,OAAO,OAAO,MAAM,UAAU,WAAW;AAAA,IAC/D,EAAE,KAAK,WAAW,OAAO,OAAO,OAAO,MAAM,aAAa,WAAW;AAAA,IACrE,EAAE,KAAK,aAAa,OAAO,OAAO,OAAO,MAAM,UAAU,WAAW;AAAA,EAAA;AAExE;AAEA,SAAS,eAAe,OAAqD;AAC3E,MAAI,CAAC,OAAO;AACV,WAAO;EACT;AAEI,MAAA,MAAM,QAAQ,MAAM,UAAU,KAAK,MAAM,WAAW,SAAS,GAAG;AAC5D,UAAA,0BAAU;AAChB,KAAC,MAAM,UAAU,CAAI,GAAA,QAAQ,CAAC,UAAU;AACtC,UAAI,EAAC,+BAAO;AAAM;AAClB,UAAI,IAAI,MAAM,MAAM,SAAS,MAAM,KAAK,CAAC;AAAA,IAAA,CAC1C;AACD,UAAM,aAAa,MAAM,WAAW,MAAM,EAAE;AACrC,WAAA,WAAW,IAAI,CAAC,cAAc;AAAA,MACnC,MAAM;AAAA,MACN,OAAO,IAAI,IAAI,QAAQ,KAAK;AAAA,IAC5B,EAAA;AAAA,EACJ;AAEA,QAAM,UAAU,MAAM,UAAU,CAAA,GAAI,IAAI,CAAC,WAAW;AAAA,IAClD,MAAM,MAAM;AAAA,IACZ,OAAO,SAAS,MAAM,KAAK;AAAA,EAC3B,EAAA;AACK,SAAA,OAAO,MAAM,EAAE;AACxB;AAEA,SAAS,0BAA0B,UAA4D;AAC7F,MAAI,CAAC,YAAY,CAAC,SAAS,SAAS;AAClC,WAAO;EACT;AACO,SAAA;AAAA,IACL;AAAA,MACE,IAAI;AAAA,MACJ,OAAO;AAAA,MACP,SAAS,SAAS,QAAQ,KAAK;AAAA,MAC/B,WAAWA,WAAAA,eAAe,SAAS,SAAS;AAAA,IAC9C;AAAA,EAAA;AAEJ;AAEA,SAAS,oBAAoB,UAAiE;AAC5F,MAAI,CAAC,UAAU;AACb,WAAO;EACT;AAEA,QAAM,YAAY,YAAY,SAAS,SAAS,EAAE,KAAK,CAAC,GAAG,QAAO,uBAAG,UAAS,OAAM,uBAAG,UAAS,EAAE;AAClG,QAAM,QAAQ,SAAS,iBAAiB,UAAU,OAAO,CAAC,KAAK,SAAS,QAAO,6BAAM,UAAS,IAAI,CAAC;AAE5F,SAAA,UAAU,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC,MAAM,UAAU;AAC1C,UAAA,QAAO,6BAAM,cAAY,6BAAM,UAAQ,6BAAM,aAAY,KAAK,QAAQ,CAAC;AACvE,UAAA,SAAQ,6BAAM,UAAS;AACvB,UAAA,aAAa,QAAQ,IAAI,KAAK,MAAO,QAAQ,QAAS,GAAI,IAAI,KAAK;AAClE,WAAA;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,IAAA;AAAA,EACF,CACD;AACH;AAEA,SAAS,cAAc,QAA6C;AAC3D,SAAA;AAAA,IACL,IAAI,OAAO;AAAA,IACX,KAAK,OAAO;AAAA,IACZ,gBAAgB,OAAO;AAAA,IACvB,WAAWA,WAAAA,eAAe,OAAO,SAAS;AAAA,IAC1C,SAAS,OAAO;AAAA,EAAA;AAEpB;AAEA,SAAS,sBAAsB,KAA0B,aAAsC;AACvF,QAAA,eAAe,YAAoB,IAAI,YAAY;AACzD,QAAM,cAAc,IAAI,UACpB,IAAI,aAAa,MAAM,aAAa,MAAM,MAC1C,aAAa,KAAK,CAAC,SAAS,QAAQ,SAAS,WAAW,KAAK,IAAI,aAAa,IAAI;AAC/E,SAAA;AAAA,IACL,IAAI,IAAI;AAAA,IACR,OAAO;AAAA,IACP,QAAQ,IAAI,eAAe;AAAA,IAC3B,WAAWA,WAAAA,eAAe,IAAI,SAAS;AAAA,IACvC,SAAS,IAAI,sBAAsB;AAAA,IACnC,SAAS,IAAI;AAAA,IACb;AAAA,IACA,UAAU,CAAC;AAAA,EAAA;AAEf;AAEA,SAAS,kBAAkB,MAAwB,aAAkD;AACnG,SAAO,YAA4B,IAAI,EAAE,IAAI,CAAC,aAAa;AAAA,IACzD,IAAI,QAAQ;AAAA,IACZ,QAAQ,QAAQ,WAAW,cAAc,SAAS;AAAA,IAClD,SAAS,QAAQ;AAAA,IACjB,MAAMC,WAAAA,WAAW,QAAQ,SAAS;AAAA,IAClC,MAAM,QAAQ;AAAA,IACd,SAAS,QAAQ;AAAA,EACjB,EAAA;AACJ;AAEA,SAAS,0BAA0B,QAAoD;AACrF,MAAI,OAAO,oBAAoB;AACtB,WAAA;AAAA,EACT;AACA,MAAI,OAAO,qBAAqB;AACvB,WAAA;AAAA,EACT;AACO,SAAA;AACT;AAEA,SAAS,yBAAyB,QAAqD;;AACrF,QAAM,QAA2B;AAAA,IAC/B,eAAe,OAAO;AAAA,IACtB,oBAAoB,OAAO;AAAA,IAC3B,WAAW,OAAO,YAAYC,WAAAA,WAAW,OAAO,SAAS,IAAI;AAAA,EAAA;AAG/D,QAAM,UAAU,YAAY,OAAO,eAAe,EAAE,IAAI,CAAC,UAAU;AAAA,IACjE,IAAI,KAAK;AAAA,IACT,KAAK,KAAK;AAAA,IACV,gBAAgB,KAAK;AAAA,IACrB,YAAYF,WAAAA,eAAe,KAAK,UAAU;AAAA,IAC1C,OAAO,CAAC,CAAC,KAAK;AAAA,EACd,EAAA;AAEK,SAAA;AAAA,IACL,QAAQ,0BAA0B,MAAM;AAAA,IACxC,SAAS,OAAO;AAAA,IAChB,cAAa,YAAO,aAAP,mBAAiB;AAAA,IAC9B,iBAAgB,YAAO,aAAP,mBAAiB;AAAA,IACjC;AAAA,IACA;AAAA,EAAA;AAEJ;AAEA,IAAI,mBAAyC;AAC7C,IAAI,qBAAqB;AAEZ,MAAA,cAAcG,cAAAA,YAAY,OAAO,MAAM;AAClD,QAAM,UAAUC,cAAAA,SAAS;AAAA,IACvB,WAAW;AAAA,IACX,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,UAAU;AAAA,IACV,WAAW;AAAA,IACX,OAAO;AAAA,IACP,WAAW;AAAA,IACX,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,MAAM;AAAA,IACN,cAAc;AAAA,IACd,cAAc;AAAA,IACd,cAAc;AAAA,IACd,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,iBAAiB;AAAA,IACjB,qBAAqB;AAAA,IACrB,eAAe;AAAA,IACf,mBAAmB;AAAA,EAAA,CACpB;AAEK,QAAA,QAAQC,cAAAA,IAAmBC,cAAA,cAAA,CAAe;AAC1C,QAAA,UAAUD,kBAAoC,IAAI;AAClD,QAAA,eAAeA,kBAAyB,CAAA,CAAE;AAChD,QAAM,mBAAmBA,cAAA,IAAYE,6CAA+B,KAAK,EAAE;AACrE,QAAA,mBAAmBF,kBAA6B,CAAA,CAAE;AAClD,QAAA,0BAA0BA,kBAAY,EAAE;AACxC,QAAA,kBAAkBA,kBAAmC,IAAI;AACzD,QAAA,kBAAkBA,kBAA0B,CAAA,CAAE;AAC9C,QAAA,wBAAwBA,kBAAI,KAAK;AACjC,QAAA,QAAQA,cAAAA,IAAqBG,cAAA,mBAAA,CAAoB;AAEvD,QAAM,YAAYJ,cAAAA,SAA2B;AAAA,IAC3C,OAAO,CAAC;AAAA,IACR,OAAO,CAAC;AAAA,IACR,YAAY;AAAA,IACZ,UAAU;AAAA,IACV,eAAe,EAAE,YAAY,IAAI,QAAQ,CAAI,GAAA,OAAO,EAAE;AAAA,IACtD,eAAe,CAAC;AAAA,IAChB,cAAc,CAAC;AAAA,IACf,aAAa,EAAE,OAAO,GAAG,OAAO,CAAC,GAAG,aAAa,CAAA,GAAI,aAAa,EAAE;AAAA,IACpE,cAAc,EAAE,oBAAoB,KAAK;AAAA,EAAA,CAC1C;AAEK,QAAA,cAAcC,kBAAoB,CAAA,CAAE;AACpC,QAAA,WAAWA,kBAAoB,CAAA,CAAE;AACjC,QAAA,YAAYA,kBAAI,CAAC;AACjB,QAAA,YAAYA,kBAAoB,CAAA,CAAE;AACxC,QAAM,cAAcD,cAAAA,SAA4B;AAAA,IAC9C,oBAAoB;AAAA,IACpB,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,MAAM;AAAA,IACN,OAAO;AAAA,EAAA,CACR;AACK,QAAA,SAASC,kBAAqB,CAAA,CAAE;AAChC,QAAA,aAAaA,kBAAI,CAAC;AAClB,QAAA,eAAeD,uBAA6B,EAAE,SAAS,IAAI,MAAM,GAAG,OAAO,GAAA,CAAI;AAC/E,QAAA,cAAcC,kBAAsB,CAAA,CAAE;AACtC,QAAA,YAAYA,kBAAI,CAAC;AACjB,QAAA,eAAeA,kBAAuB,CAAA,CAAE;AACxC,QAAA,eAAeA,kBAAuB,CAAA,CAAE;AACxC,QAAA,eAAeA,kBAAgC,IAAI;AACnD,QAAA,eAAeA,kBAAiC,IAAI;AACpD,QAAA,gBAAgBA,kBAAwB,CAAA,CAAE;AAC1C,QAAA,oBAAoBA,kBAA4B,CAAA,CAAE;AAClD,QAAA,4BAA4BD,uBAAiC,CAAA,CAAE;AAC/D,QAAA,yBAAyBA,uBAAiC,CAAA,CAAE;AAC5D,QAAA,sBAAsBA,uBAA+C,CAAA,CAAE;AACvE,QAAA,2CAA2B;AAE3B,QAAA,wBAAwBK,cAAAA,SAAS,MAAM;;AACrC,UAAA,YAAW,6BAAwB,UAAxB,mBAA+B;AAChD,QAAI,UAAU;AACL,aAAA;AAAA,IACT;AACA,UAAM,WAAW,iBAAiB;AAClC,QAAI,UAAU;AACZ,YAAMC,YAAU,mBAAQ,UAAR,mBAAe,sBAAf,mBAAmC;AAC7C,YAAA,YAAWA,0CAAS,SAATA,mBAAe;AAChC,UAAI,UAAU;AACL,eAAA;AAAA,MACT;AAAA,IACF;AACA,aAAO,mBAAQ,UAAR,mBAAe,aAAf,mBAAyB,WAAU;AAAA,EAAA,CAC3C;AAEQ,WAAA,wBAAwB,UAAkB,OAAwB;AACnE,UAAA,mBAAmB,YAAY,IAAI,KAAK;AAC9C,UAAM,mBAAmB,SAAS,IAAI,KAAK,KAAK,sBAAsB,SAAS;AACxE,WAAA,GAAG,eAAe,KAAK,eAAe;AAAA,EAC/C;AACM,QAAA,kBAAkBD,cAAAA,SAA+B,MAAM;AAC3D,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACb,aAAO;IACT;AACA,UAAM,WAAW,wBAAwB,UAAU,sBAAsB,KAAK;AACvE,WAAA,oBAAoB,QAAQ,KAAK;EAAC,CAC1C;AAED,QAAM,kBAAkBA,cAAA;AAAA,IAAS,MAC/B,aAAa,MAAM,OAAO,CAAC,KAAK,SAAS,OAAO,OAAO,KAAK,MAAM,IAAI,IAAI,OAAO,KAAK,MAAM,IAAI,IAAI,CAAC;AAAA,EAAA;AAEjG,QAAA,sBAAsBA,cAAAA,SAAS,MAAM;AACzC,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACN,aAAA;AAAA,IACT;AACM,UAAA,SAAS,0BAA0B,QAAQ;AACjD,QAAI,CAAC,QAAQ;AACJ,aAAA;AAAA,IACT;AACM,UAAA,WAAW,4BAA4B,QAAQ;AACrD,QAAI,CAAC,UAAU;AACN,aAAA;AAAA,IACT;AACA,WAAO,SAAS;AAAA,EAAA,CACjB;AAED,WAAS,4BAA4B,UAA0B;AAC7D,QAAI,CAAC,UAAU;AACN,aAAA;AAAA,IACT;AACA,QAAI,OAAO,UAAU,eAAe,KAAK,wBAAwB,QAAQ,GAAG;AACnE,aAAA,uBAAuB,QAAQ,KAAK;AAAA,IAC7C;AACI,QAAA;AACF,YAAM,SAASV,cAAAA,MAAI,eAAe,yBAAyB,QAAQ,CAAC;AAC9D,YAAA,aAAa,sBAAsB,MAAM;AAC/C,6BAAuB,QAAQ,IAAI;AAC5B,aAAA;AAAA,aACA,OAAO;AACdA,oBAAA,MAAA,MAAA,QAAA,wBAAa,gDAAgD,KAAK;AAClE,6BAAuB,QAAQ,IAAI;AAC5B,aAAA;AAAA,IACT;AAAA,EACF;AAES,WAAA,4BAA4B,UAAkB,WAAmB;AACxE,QAAI,CAAC,UAAU;AACb;AAAA,IACF;AACI,QAAA;AACF,UAAI,CAAC,WAAW;AACV,YAAA,OAAOA,cAAAA,MAAI,sBAAsB,YAAY;AAC3CA,wBAAAA,MAAA,kBAAkB,yBAAyB,QAAQ,CAAC;AAAA,QAAA,OACnD;AACLA,wBAAAA,MAAI,eAAe,yBAAyB,QAAQ,GAAG,EAAE;AAAA,QAC3D;AAAA,MAAA,OACK;AACLA,sBAAAA,MAAI,eAAe,yBAAyB,QAAQ,GAAG,SAAS;AAAA,MAClE;AAAA,aACO,OAAO;AACdA,oBAAA,MAAA,MAAA,QAAA,wBAAa,mDAAmD,KAAK;AAAA,IACvE;AACA,2BAAuB,QAAQ,IAAI;AAAA,EACrC;AAEM,QAAA,6BAA6BM,kBAAY,EAAE;AAC3C,QAAA,4BAA4BA,kBAAY,EAAE;AAEhDM,gBAAA;AAAA,IACE,MAAM,iBAAiB;AAAA,IACvB,CAAC,aAAa;AACN,YAAA,aAAa,qCAAU;AAC7B,UAAI,CAAC,YAAY;AACf,kBAAU,QAAQ;AAClB,mCAA2B,QAAQ;AACnC;AAAA,MACF;AAEI,UAAA,CAAC,MAAM,OAAO;AAChB;AAAA,MACF;AAEA,WAAK,cAAc,EAAE,MAAM,CAAC,UAAU;AACpCZ,sBAAA,4CAAa,8BAA8B,KAAK;AAAA,MAAA,CACjD;AAAA,IACH;AAAA,IACA,EAAE,OAAO,OAAO;AAAA,EAAA;AAGZ,QAAA,UAAUU,cAAAA,SAA6B,MAAM;AAC7C,QAAA,CAAC,QAAQ,OAAO;AACX,aAAA;AAAA,IACT;AACO,WAAA;AAAA,MACL,IAAI,QAAQ,MAAM;AAAA,MAClB,MAAM,QAAQ,MAAM;AAAA,MACpB,MAAM,QAAQ,MAAM,UAAU,UAAU;AAAA,MACxC,QAAQ;AAAA,MACR,aAAa,QAAQ,MAAM,gBAAgB,CAAC;AAAA,IAAA;AAAA,EAC9C,CACD;AAED,QAAM,UAAUA,cAAAA,SAAS,MAAM;;AAAA,0BAAQ,UAAR,mBAAe,YAAW;AAAA,GAAK;AAE9D,WAAS,cAAc;AACVG,kBAAAA;AACX,UAAM,QAAQ;AACd,YAAQ,QAAQ;AAChB,iBAAa,QAAQ;AACrB,qBAAiB,QAAQ;AACzB,4BAAwB,QAAQ;AAChC,qBAAiB,QAAQ;AACzB,cAAU,QAAQ;AAClB,+BAA2B,QAAQ;AACnC,yBAAqB,MAAM;AACHC,kBAAAA;AACL,uBAAA;AACnB,WAAO,KAAK,mBAAmB,EAAE,QAAQ,CAAC,QAAQ;AAChD,aAAO,oBAAoB,GAAG;AAAA,IAAA,CAC/B;AAAA,EACH;AAEA,WAAS,SAAS,MAAuB;AACnC,QAAA,MAAM,UAAU,MAAM;AACxB;AAAA,IACF;AACA,UAAM,QAAQ;AACdC,kBAAA,mBAAmB,IAAI;AAAA,EACzB;AAEA,WAAS,gBAAgB,SAAgC;;AACvD,UAAM,UAAU,mCAAS;AACzB,UAAM,iBAAiB;AACX;AAER,QAAA,WAAW,CAAC,gBAAgB;AAC9Bf,oBAAA,MAAI,UAAU,EAAE,OAAO,SAAS,MAAM,QAAQ;AAAA,IAChD;AAEA,UAAM,cAAc,OAAO,oBAAoB,aAAa,kBAAkB;AAC9E,UAAM,QAAQ,cAAc,YAAY,IAAI,CAAA;AAC5C,UAAM,WAAW,MAAM,QAAQ,KAAK,KAAK,MAAM,SAAS;AAClD,UAAA,eAAe,aAAW,WAAM,MAAM,SAAS,CAAC,MAAtB,mBAAyB,UAAS,KAAK;AAEnE,QAAA,CAAC,YAAY,iBAAiB,qBAAqB;AAChC,2BAAA;AACrB;AAAA,IACF;AAEA,QAAI,oBAAoB;AACtB;AAAA,IACF;AAEqB,yBAAA;AACrB,UAAM,QAAQ,WAAW,CAAC,iBAAiB,MAAM;AACjD,eAAW,MAAM;AACfA,oBAAAA,MAAI,SAAS,EAAE,KAAK,qBAAsB,CAAA;AAC1C,iBAAW,MAAM;AACM,6BAAA;AAAA,SACpB,GAAG;AAAA,OACL,KAAK;AAAA,EACV;AAEA,WAAS,mBAAmB,SAAkB;AAC5C,oBAAgB,EAAE,SAAS,WAAW,cAAe,CAAA;AAAA,EACvD;AAEe,iBAAA,UAAU,QAAQ,OAAO;AAClC,QAAA,CAAC,MAAM,OAAO;AACA;AAChB;AAAA,IACF;AAEA,QAAI,CAAC,SAAS,QAAQ,SAAS,aAAa,MAAM,QAAQ;AACxD;AAAA,IACF;AAEI,QAAA,QAAQ,aAAa,kBAAkB;AAClC,aAAA;AAAA,IACT;AAEA,YAAQ,YAAY;AACLgB,eAAAA;AAEf,wBAAoB,YAAY;AAC1B,UAAA;AACF,cAAM,gBAAgB;AACtB,cAAM,iBAAiB;AAAA,eAChB,OAAO;AACdhB,sBAAA,MAAc,MAAA,SAAA,wBAAA,oBAAoB,KAAK;AACvB;AACV,cAAA;AAAA,MAAA,UACN;AACA,gBAAQ,YAAY;AACD,2BAAA;AAAA,MACrB;AAAA,IAAA;AAGK,WAAA;AAAA,EACT;AAEA,iBAAe,cAAc;AACvB,QAAA,CAAC,MAAM,OAAO;AACZ,UAAA;AACF,cAAM,gBAAgBiB,gBAAAA;AACtB,YAAI,cAAc,iBAAiB;AACjC,gBAAM,UAAU,cAAc,mBAAmB,cAAc,SAAS,CAAC;AACzE,eAAI,mCAAS,mBAAiB,mCAAS,mBAAkB,CAAC,QAAQ,OAAO;AACjE,kBAAA;AAAA,cACJ,EAAE,UAAU,QAAQ,eAAe,UAAU,QAAQ,eAAe;AAAA,cACpE,EAAE,eAAe,KAAK;AAAA,YAAA;AAAA,UAE1B;AAAA,QACF;AAAA,eACO,OAAO;AACdjB,sBAAA,MAAa,MAAA,QAAA,wBAAA,0CAA0C,KAAK;AAAA,MAC9D;AAAA,IACF;AACI,QAAA,CAAC,MAAM,OAAO;AACA;AACT,aAAA;AAAA,IACT;AACA,QAAI,CAAC,QAAQ,SAAS,CAAC,aAAa,MAAM,QAAQ;AAChD,YAAM,UAAU;AAAA,IAClB;AACO,WAAA,CAAC,CAAC,QAAQ;AAAA,EACnB;AAEA,iBAAe,kBAAkB;AAC3B,QAAA,CAAC,MAAM,OAAO;AAChB,cAAQ,QAAQ;AACT,aAAA;AAAA,IACT;AACA,YAAQ,OAAO;AACX,QAAA;AACI,YAAA,OAAO,MAAMkB,sBAAoC;AAAA,QACrD,KAAK;AAAA,QACL,QAAQ;AAAA,QACR,MAAM;AAAA,QACN,aAAa;AAAA,MAAA,CACd;AACD,cAAQ,QAAQ;AACT,aAAA;AAAA,aACA,OAAO;AACd,cAAQ,QAAQ;AACV,YAAA;AAAA,IAAA,UACN;AACA,cAAQ,OAAO;AAAA,IACjB;AAAA,EACF;AAEA,iBAAe,mBAAmB;AAC5B,QAAA,CAAC,MAAM,OAAO;AAChB,mBAAa,QAAQ;AACrB,uBAAiB,QAAQ;AACzB,aAAO;IACT;AACA,YAAQ,WAAW;AACf,QAAA;AACI,YAAA,WAAW,MAAMA,sBAAiC;AAAA,QACtD,KAAK;AAAA,QACL,QAAQ;AAAA,QACR,MAAM;AAAA,QACN,aAAa;AAAA,MAAA,CACd;AACK,YAAA,QAAQ,YAA+B,qCAAU,SAAS;AAChE,mBAAa,QAAQ;AAEf,YAAA,SAASV,cAAAA,oCAAoCW,cAAAA;AAC7C,YAAA,UAAU,MAAM,KAAK,CAAC,SAAS,sBAAsB,KAAK,YAAY,MAAM,sBAAsB,MAAM,CAAC;AAC/G,UAAI,SAAS;AACX,yBAAiB,QAAQ,QAAQ;AACjCC,qDAA+B,QAAQ,YAAY;AACnD,gCAAwB,QAAQ;AAChC,yBAAiB,QAAQ;MAAC,WACjB,MAAM,QAAQ;AACN,yBAAA,QAAQ,MAAM,CAAC,EAAE;AACHA,sBAAAA,+BAAA,MAAM,CAAC,EAAE,YAAY;AACpD,gCAAwB,QAAQ;AAChC,yBAAiB,QAAQ;MAAC,OACrB;AACL,yBAAiB,QAAQ;AACQC,sBAAAA;AACjC,gCAAwB,QAAQ;AAChC,yBAAiB,QAAQ;MAC3B;AACO,aAAA;AAAA,IAAA,UACP;AACA,cAAQ,WAAW;AAAA,IACrB;AAAA,EACF;AAEA,WAAS,oBAAoB,MAAc;AACnC,UAAA,aAAa,sBAAsB,IAAI;AACvC,UAAA,QAAQ,aAAa,MAAM,KAAK,CAAC,SAAS,sBAAsB,KAAK,YAAY,MAAM,UAAU;AACvG,QAAI,CAAC,OAAO;AACV;AAAA,IACF;AACA,qBAAiB,QAAQ,MAAM;AAC/BD,iDAA+B,MAAM,YAAY;AACjD,4BAAwB,QAAQ;AAChC,qBAAiB,QAAQ;EAC3B;AAEA,WAAS,2BAA2B,UAAkB;AAC5B,4BAAA,SAAS,YAAY,IAAI,KAAK;AAAA,EACxD;AAEe,iBAAA,MAAM,SAAuB,SAAuC;AACjF,YAAQ,QAAQ;AACZ,QAAA;AACI,YAAA,WAAW,MAAMF,sBAAyB;AAAA,QAC9C,KAAK;AAAA,QACL,QAAQ;AAAA,QACR,MAAM;AAAA,QACN,aAAa;AAAA,MAAA,CACd;AACDI,kCAAc,SAAS,KAAK;AAC5B,YAAM,QAAQ,SAAS;AACnB,UAAA,EAAC,mCAAS,gBAAe;AAC3B,cAAM,UAAU,IAAI;AAAA,MACtB;AACO,aAAA;AAAA,IAAA,UACP;AACA,cAAQ,QAAQ;AAAA,IAClB;AAAA,EACF;AAEA,iBAAe,SAAS;AACtB,QAAI,QAAQ,QAAQ;AAClB;AAAA,IACF;AAEA,YAAQ,SAAS;AACb,QAAA;AACF,UAAI,MAAM,OAAO;AACf,cAAMJ,sBAAW;AAAA,UACf,KAAK;AAAA,UACL,QAAQ;AAAA,UACR,MAAM;AAAA,UACN,aAAa;AAAA,QAAA,CACd;AAAA,MACH;AAAA,aACO,OAAO;AACdlB,oBAAA,6CAAa,yBAAyB,KAAK;AAAA,IAAA,UAC3C;AACA,cAAQ,SAAS;AACD,sBAAA,EAAE,SAAS,QAAA,CAAS;AAAA,IACtC;AAAA,EACF;AAEA,iBAAe,gBAAgB;;AAC7B,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACb,gBAAU,QAAQ;AAClB,gBAAU,QAAQ;AAClB,gBAAU,gBAAgB;AAC1B,gBAAU,eAAe;AACzB,kBAAY,QAAQ;AACpB;AAAA,IACF;AAEA,YAAQ,YAAY;AAChB,QAAA;AACI,YAAA,CAAC,WAAW,OAAO,UAAU,OAAO,eAAe,cAAc,MAAM,IAAI,MAAM,QAAQ,IAAI;AAAA,QACjGkB,sBAA8B;AAAA,UAC5B,KAAK;AAAA,UACL,QAAQ;AAAA,UACR,MAAM,EAAE,SAAS;AAAA,UACjB,MAAM;AAAA,UACN,aAAa;AAAA,QAAA,CACd;AAAA,QACDA,sBAA0C;AAAA,UACxC,KAAK;AAAA,UACL,QAAQ;AAAA,UACR,MAAM,EAAE,UAAU,iBAAiB,MAAM;AAAA,UACzC,MAAM;AAAA,UACN,aAAa;AAAA,QAAA,CACd;AAAA,QACDA,sBAA0C;AAAA,UACxC,KAAK;AAAA,UACL,QAAQ;AAAA,UACR,MAAM,EAAE,UAAU,iBAAiB,KAAK;AAAA,UACxC,MAAM;AAAA,UACN,aAAa;AAAA,QAAA,CACd;AAAA,QACDA,sBAAsC;AAAA,UACpC,KAAK;AAAA,UACL,QAAQ;AAAA,UACR,MAAM,EAAE,UAAU,oBAAoB,KAAK;AAAA,UAC3C,MAAM;AAAA,UACN,aAAa;AAAA,QAAA,CACd;AAAA,QACDA,sBAA6B;AAAA,UAC3B,KAAK;AAAA,UACL,QAAQ;AAAA,UACR,MAAM,EAAE,UAAU,MAAM,GAAG,OAAO,GAAG,oBAAoB,KAAK;AAAA,UAC9D,MAAM;AAAA,UACN,aAAa;AAAA,QAAA,CACd;AAAA,QACDA,sBAAiC;AAAA,UAC/B,KAAK;AAAA,UACL,QAAQ;AAAA,UACR,MAAM;AAAA,UACN,aAAa;AAAA,QAAA,CACd,EAAE,MAAM,MAAM,IAAI;AAAA,UACnB,aAAQ,UAAR,mBAAe,WACXA,sBAAiC;AAAA,UAC/B,KAAK;AAAA,UACL,QAAQ;AAAA,UACR,MAAM;AAAA,UACN,aAAa;AAAA,QAAA,CACd,EAAE,MAAM,MAAM,IAAI,IACnB,QAAQ,QAAQ,IAAI;AAAA,MAAA,CACzB;AAES,gBAAA,QAAQ,oBAAoB,uCAAW,UAAU;AACrD,YAAA,aAAa,eAAe,KAAK;AACvC,gBAAU,QAAQ;AACZ,YAAA,eAAe,oBAAoB,UAAU;AACnD,gBAAU,aAAa,aAAa;AACpC,gBAAU,WAAW,aAAa;AAC5B,YAAA,kBAAkB,0BAA0B,QAAQ;AAC1D,gBAAU,gBAAgB;AAChB,gBAAA,gBAAgB,0BAA0B,YAAY;AACtD,gBAAA,eAAe,oBAAoB,KAAK;AAE5C,YAAA,QAAQ,YAAsB,+CAAe,IAAI;AAC3C,kBAAA,QAAQ,MAAM,IAAI,aAAa;AAE3C,UAAI,QAAQ;AACV,qBAAa,QAAQ;AAAA,MACvB;AAAA,IAAA,UACA;AACA,cAAQ,YAAY;AAAA,IACtB;AAAA,EACF;AAEe,iBAAA,aAAa,UAAsC,IAAI;AACpE,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACb,eAAS,QAAQ;AACjB,gBAAU,QAAQ;AAClB;AAAA,IACF;AAEA,UAAM,cAAiC;AAAA,MACrC,GAAG;AAAA,MACH,GAAG;AAAA,IAAA;AAGL,gBAAY,OAAO,YAAY,QAAQ,YAAY,OAAO,IAAI,YAAY,OAAO;AACjF,gBAAY,QAAQ,YAAY,SAAS,YAAY,QAAQ,IAAI,YAAY,QAAQ;AAE9E,WAAA,OAAO,aAAa,WAAW;AAEhC,UAAA,OAAO,YAAY,QAAQ;AAC3B,UAAA,QAAQ,YAAY,SAAS;AAEnC,YAAQ,QAAQ;AACZ,QAAA;AACF,YAAM,UAAU,qBAAqB,UAAU,aAAa,MAAM,KAAK;AACjE,YAAA,WAAW,MAAMA,sBAA6B;AAAA,QAClD,KAAK;AAAA,QACL,QAAQ;AAAA,QACR,MAAM;AAAA,QACN,MAAM;AAAA,QACN,aAAa;AAAA,MAAA,CACd;AACK,YAAA,QAAQ,YAAsB,qCAAU,IAAI;AACzC,eAAA,QAAQ,MAAM,IAAI,aAAa;AACxC,gBAAU,QAAQ,QAAO,qCAAU,UAAS,MAAM,UAAU,CAAC;AAAA,IAAA,UAC7D;AACA,cAAQ,QAAQ;AAAA,IAClB;AAAA,EACF;AAEe,iBAAA,cAAc,QAAQ,OAAO;AAC1C,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACb,gBAAU,QAAQ;AAClB,iCAA2B,QAAQ;AACnC,aAAO;IACT;AAEI,QAAA,CAAC,SAAS,UAAU,MAAM,SAAS,KAAK,2BAA2B,UAAU,UAAU;AACzF,aAAO,UAAU;AAAA,IACnB;AAEA,QAAI,CAAC,SAAS,qBAAqB,IAAI,QAAQ,GAAG;AACzC,aAAA,qBAAqB,IAAI,QAAQ;AAAA,IAC1C;AAEA,QAAI,OAAO;AACT,2BAAqB,OAAO,QAAQ;AAAA,IACtC;AAEA,UAAM,WAAW,YAAY;AAC3B,cAAQ,YAAY;AAChB,UAAA;AACI,cAAA,WAAW,MAAMA,sBAAiC;AAAA,UACtD,KAAK;AAAA,UACL,QAAQ;AAAA,UACR,MAAM,EAAE,SAAS;AAAA,UACjB,MAAM;AAAA,UACN,aAAa;AAAA,QAAA,CACd;AACK,cAAA,QAAQ,YAAY,qCAAU,KAAK;AACzC,kBAAU,QAAQ,MAAM,IAAI,CAAC,UAAU;AAAA,UACrC,OAAM,6BAAM,SAAQ;AAAA,UACpB,SAAQ,6BAAM,WAAU;AAAA,UACxB,UAAU,QAAO,6BAAM,aAAY,CAAC;AAAA,UACpC,OAAO,QAAO,6BAAM,UAAS,CAAC;AAAA,UAC9B,UAAS,6BAAM,YAAW;AAAA,QAC1B,EAAA;AACF,mCAA2B,QAAQ;AACnC,eAAO,UAAU;AAAA,MAAA,UACjB;AACA,gBAAQ,YAAY;AACpB,6BAAqB,OAAO,QAAQ;AAAA,MACtC;AAAA,IAAA;AAGmB,yBAAA,IAAI,UAAU,OAAO;AACnC,WAAA;AAAA,EACT;AAEe,iBAAA,oBAAoB,QAAQ,OAAO;;AAChD,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACb,aAAO;IACT;AAEA,UAAM,gBAAc,6BAAwB,UAAxB,mBAA+B,WAAU;AAC7D,UAAM,WAAW,wBAAwB,UAAU,eAAe,sBAAsB,KAAK;AAE7F,QAAI,CAAC,SAAS,oBAAoB,QAAQ,GAAG;AAC3C,aAAO,oBAAoB,QAAQ;AAAA,IACrC;AAEA,YAAQ,kBAAkB;AACtB,QAAA;AACI,YAAA,WAAW,MAAMA,sBAAuC;AAAA,QAC5D,KAAK;AAAA,QACL,QAAQ;AAAA,QACR,MAAM,EAAE,UAAU,aAAa,eAAe,OAAU;AAAA,QACxD,MAAM;AAAA,QACN,aAAa;AAAA,MAAA,CACd;AAED,YAAM,mBAAkB,qCAAU,gBAAe,eAAe,IAAI,WAAW;AAC/E,YAAM,UAAU,YAAiB,qCAAU,MAAM,EAC9C,IAAI,CAAC,UAAU;AAAA,QACd,YAAW,6BAAM,aAAY,IAAI,WAAW,KAAK;AAAA,QACjD,eAAc,6BAAM,gBAAe,IAAI,WAAW,KAAK;AAAA,QACvD,oBAAoB,QAAQ,6BAAM,kBAAkB;AAAA,MAAA,EACpD,EACD,OAAO,CAAC,SAAS,KAAK,SAAS,SAAS,CAAC;AAExC,UAAA,CAAC,QAAQ,QAAQ;AACnB,cAAM,WAAW,sBAAsB,WAAS,mBAAQ,UAAR,mBAAe,aAAf,mBAAyB,WAAU;AACnF,YAAI,UAAU;AACJ,kBAAA,KAAK,EAAE,UAAU,UAAU,aAAa,GAAG,QAAQ,WAAW;AAAA,QACxE;AAAA,MACF;AAEA,uBAAiB,QAAQ;AACrB,UAAA,mBAAmB,wBAAwB,OAAO;AACpD,gCAAwB,QAAQ;AAAA,MAClC;AAEgB,sBAAA,SAAQ,qCAAU,UAAS;AAC3C,sBAAgB,QAAQ,YAAiB,qCAAU,KAAK,EAAE,IAAI,uBAAuB;AAC/D,4BAAA,QAAQ,QAAQ,qCAAU,kBAAkB;AAElE,YAAM,QAAQ,YAAiB,qCAAU,KAAK,EAC3C,IAAI,CAAC,UAAU;AAAA,QACd,YAAW,6BAAM,aAAY,IAAI,WAAW,KAAK;AAAA,QACjD,OAAO,QAAO,6BAAM,UAAS,CAAC,KAAK;AAAA,MAAA,EACnC,EACD,OAAO,CAAC,SAAS,KAAK,QAAQ;AAEjC,0BAAoB,QAAQ,IAAI;AAChC,aAAO,oBAAoB,QAAQ;AAAA,IAAA,UACnC;AACA,cAAQ,kBAAkB;AAAA,IAC5B;AAAA,EACF;AAEe,iBAAA,oBACb,OACA,WACA,kBACA;;AACA,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACP,YAAA,IAAI,MAAM,QAAQ;AAAA,IAC1B;AAEA,UAAM,aAAa,YAAgC,KAAK,EACrD,IAAI,CAAC,UAAU;AAAA,MACd,YAAW,6BAAM,aAAY,IAAI,WAAW,KAAK;AAAA,MACjD,OAAO,QAAO,6BAAM,UAAS,CAAC,KAAK;AAAA,IAAA,EACnC,EACD,OAAO,CAAC,SAAS,KAAK,QAAQ;AAEjC,UAAM,gBAAc,6BAAwB,UAAxB,mBAA+B,WAAU;AAE7D,YAAQ,sBAAsB;AAC1B,QAAA;AACI,YAAA,WAAW,MAAMA,sBAAuC;AAAA,QAC5D,KAAK;AAAA,QACL,QAAQ;AAAA,QACR,MAAM;AAAA,UACJ;AAAA,UACA,OAAO;AAAA,UACP,aAAa,eAAe;AAAA,UAC5B,WAAW,OAAO,cAAc,WAAW,YAAY;AAAA,UACvD,kBACE,OAAO,qBAAqB,YAAY,CAAC,OAAO,MAAM,gBAAgB,IAClE,mBACA;AAAA,QACR;AAAA,QACA,MAAM;AAAA,QACN,aAAa;AAAA,MAAA,CACd;AAED,YAAM,mBAAkB,qCAAU,gBAAe,eAAe,IAAI,WAAW;AAC3E,UAAA,mBAAmB,wBAAwB,OAAO;AACpD,gCAAwB,QAAQ;AAAA,MAClC;AAEA,YAAM,UAAU,YAAiB,qCAAU,MAAM,EAC9C,IAAI,CAAC,UAAU;AAAA,QACd,YAAW,6BAAM,aAAY,IAAI,WAAW,KAAK;AAAA,QACjD,eAAc,6BAAM,gBAAe,IAAI,WAAW,KAAK;AAAA,QACvD,oBAAoB,QAAQ,6BAAM,kBAAkB;AAAA,MAAA,EACpD,EACD,OAAO,CAAC,SAAS,KAAK,SAAS,SAAS,CAAC;AAC5C,UAAI,QAAQ,QAAQ;AAClB,yBAAiB,QAAQ;AAAA,MAC3B;AAEgB,sBAAA,SAAQ,qCAAU,UAAS,gBAAgB;AAC3D,sBAAgB,QAAQ,YAAiB,qCAAU,KAAK,EAAE,IAAI,uBAAuB;AAC/D,4BAAA,QAAQ,QAAQ,qCAAU,kBAAkB;AAElE,YAAM,QAAQ,YAAiB,qCAAU,KAAK,EAC3C,IAAI,CAAC,UAAU;AAAA,QACd,YAAW,6BAAM,aAAY,IAAI,WAAW,KAAK;AAAA,QACjD,OAAO,QAAO,6BAAM,UAAS,CAAC,KAAK;AAAA,MAAA,EACnC,EACD,OAAO,CAAC,SAAS,KAAK,QAAQ;AAEjC,YAAM,WAAW,wBAAwB,UAAU,kBAAkB,sBAAsB,KAAK;AAChG,0BAAoB,QAAQ,IAAI;AAChC,aAAO,oBAAoB,QAAQ;AAAA,IAAA,UACnC;AACA,cAAQ,sBAAsB;AAAA,IAChC;AAAA,EACF;AAEe,iBAAA,uBAAuB,QAAgB,QAAgB,MAAe;;AACnF,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACP,YAAA,IAAI,MAAM,QAAQ;AAAA,IAC1B;AAEA,UAAM,gBAAc,6BAAwB,UAAxB,mBAA+B,WAAU;AAEvD,UAAA,WAAW,MAAMA,sBAAuC;AAAA,MAC5D,KAAK;AAAA,MACL,QAAQ;AAAA,MACR,MAAM;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,aAAa,eAAe;AAAA,MAC9B;AAAA,MACA,MAAM;AAAA,MACN,aAAa;AAAA,IAAA,CACd;AAEe,oBAAA,SAAQ,qCAAU,UAAS,gBAAgB;AAC3D,oBAAgB,QAAQ,YAAiB,qCAAU,KAAK,EAAE,IAAI,uBAAuB;AAC/D,0BAAA,QAAQ,QAAQ,qCAAU,kBAAkB;AAElE,WAAO,gBAAgB;AAAA,EACzB;AAEA,iBAAe,cAAc,SAA0H;AACrJ,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACP,YAAA,IAAI,MAAM,QAAQ;AAAA,IAC1B;AAEA,UAAM,OAAO;AAAA,MACX;AAAA,MACA,UAAU,QAAQ;AAAA,MAClB,UAAU,QAAQ;AAAA,MAClB,SAAS,QAAQ,WAAW;AAAA,MAC5B,GAAI,QAAQ,eAAe,EAAE,cAAc,QAAQ,aAAA,IAAiB,CAAC;AAAA,IAAA;AAGjE,UAAA,WAAW,MAAMA,sBAAkC;AAAA,MACvD,KAAK;AAAA,MACL,QAAQ;AAAA,MACR;AAAA,MACA,MAAM;AAAA,MACN,aAAa;AAAA,IAAA,CACd;AAEK,UAAA,aAAa,EAAE,MAAM,YAAY,MAAM,OAAO,YAAY,OAAO;AAChE,WAAA;AAAA,EACT;AAEA,iBAAe,iBAAiB,UAA8B;AAC5D,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACP,YAAA,IAAI,MAAM,QAAQ;AAAA,IAC1B;AAEA,UAAM,YAA0D;AAAA,MAC9D,QAAQ;AAAA,MACR,SAAS;AAAA,MACT,OAAO;AAAA,IAAA;AAGH,UAAA,SAAS,UAAU,SAAS,MAAM;AACxC,QAAI,CAAC,QAAQ;AACL,YAAA,IAAI,MAAM,QAAQ;AAAA,IAC1B;AAEM,UAAA,SAAS,MAAMA,sBAAiC;AAAA,MACpD,KAAK,aAAa,MAAM;AAAA,MACxB,QAAQ;AAAA,MACR,MAAM,EAAE,UAAU,SAAS,SAAS,QAAQ;AAAA,MAC5C,MAAM;AAAA,MACN,aAAa;AAAA,IAAA,CACd;AAEK,UAAA,aAAa,EAAE,MAAM,YAAY,MAAM,OAAO,YAAY,OAAO;AACvE,YAAO,iCAAQ,YAAW;AAAA,EAC5B;AAEA,iBAAe,WAAW,SAAiB;AACzC,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACP,YAAA,IAAI,MAAM,QAAQ;AAAA,IAC1B;AAEM,UAAA,SAAS,MAAMA,sBAAiC;AAAA,MACpD,KAAK;AAAA,MACL,QAAQ;AAAA,MACR,MAAM,EAAE,UAAU,QAAQ;AAAA,MAC1B,MAAM;AAAA,MACN,aAAa;AAAA,IAAA,CACd;AAEK,UAAA,aAAa,EAAE,MAAM,YAAY,MAAM,OAAO,YAAY,OAAO;AACvE,YAAO,iCAAQ,YAAW;AAAA,EAC5B;AAEe,iBAAA,WAAW,UAA8B,IAAI;AAC1D,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACb,aAAO,QAAQ;AACf,iBAAW,QAAQ;AACnB;AAAA,IACF;AAEA,UAAM,cAAkC;AAAA,MACtC,GAAG;AAAA,MACH,GAAG;AAAA,IAAA;AAGL,gBAAY,OAAO,YAAY,QAAQ,YAAY,OAAO,IAAI,YAAY,OAAO;AACjF,gBAAY,QAAQ,YAAY,SAAS,YAAY,QAAQ,IAAI,YAAY,QAAQ;AACrF,gBAAY,WAAW,YAAY,WAAW,IAAI;AAE3C,WAAA,OAAO,cAAc,WAAW;AAEjC,UAAA,OAAO,aAAa,QAAQ;AAC5B,UAAA,QAAQ,aAAa,SAAS;AACpC,UAAM,WAAW,aAAa,WAAW,IAAI,KAAK;AAElD,YAAQ,SAAS;AACb,QAAA;AACI,YAAA,WAAW,MAAMA,sBAA2C;AAAA,QAChE,KAAK;AAAA,QACL,QAAQ;AAAA,QACR,MAAM,EAAE,UAAU,MAAM,OAAO,SAAS,YAAY,EAAE;AAAA,QACtD,MAAM;AAAA,QACN,aAAa;AAAA,MAAA,CACd;AACK,YAAA,QAAQ,YAAiB,qCAAU,IAAI;AACtC,aAAA,QAAQ,MAAM,IAAI,cAAc;AACvC,iBAAW,QAAQ,QAAO,qCAAU,UAAS,MAAM,UAAU,CAAC;AAAA,IAAA,UAC9D;AACA,cAAQ,SAAS;AAAA,IACnB;AAAA,EACF;AAEA,iBAAe,kBAAkB,SAA8B;AAC7D,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACP,YAAA,IAAI,MAAM,QAAQ;AAAA,IAC1B;AAEA,UAAM,YAAY,YAAoB,QAAQ,SAAS,EACpD,IAAI,CAAC,SAAS,KAAK,KAAM,CAAA,EACzB,OAAO,CAAC,SAAS,KAAK,SAAS,CAAC;AAE/B,QAAA,CAAC,UAAU,QAAQ;AACf,YAAA,IAAI,MAAM,OAAO;AAAA,IACzB;AAEM,UAAA,OAAO,QAAQ,SAAS,gBAAgB;AACxC,UAAA,SAAS,MAAMA,sBAAiC;AAAA,MACpD,KAAK,cAAc,IAAI;AAAA,MACvB,QAAQ;AAAA,MACR,MAAM,EAAE,UAAU,UAAU,UAAU;AAAA,MACtC,MAAM;AAAA,MACN,aAAa;AAAA,IAAA,CACd;AAEK,UAAA,WAAW,EAAE,MAAM,aAAa,MAAM,OAAO,aAAa,OAAO,SAAS,aAAa,QAAS,CAAA;AACtG,YAAO,iCAAQ,YAAW;AAAA,EAC5B;AAEA,iBAAe,aAAa,WAAqB;AAC/C,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACP,YAAA,IAAI,MAAM,QAAQ;AAAA,IAC1B;AAEA,UAAM,UAAU,YAAoB,SAAS,EAC1C,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC,EACzB,OAAO,CAAC,SAAS,KAAK,SAAS,CAAC;AAE/B,QAAA,CAAC,QAAQ,QAAQ;AACb,YAAA,IAAI,MAAM,OAAO;AAAA,IACzB;AAEM,UAAA,SAAS,MAAMA,sBAAiC;AAAA,MACpD,KAAK;AAAA,MACL,QAAQ;AAAA,MACR,MAAM,EAAE,UAAU,UAAU,QAAQ;AAAA,MACpC,MAAM;AAAA,MACN,aAAa;AAAA,IAAA,CACd;AAEK,UAAA,WAAW,EAAE,MAAM,aAAa,MAAM,OAAO,aAAa,OAAO,SAAS,aAAa,QAAS,CAAA;AACtG,YAAO,iCAAQ,YAAW;AAAA,EAC5B;AAEA,iBAAe,YAAY,SAA6B;AACtD,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACP,YAAA,IAAI,MAAM,QAAQ;AAAA,IAC1B;AAEA,UAAM,OAAO;AAAA,MACX;AAAA,MACA,UAAU,QAAQ;AAAA,MAClB,UAAU,QAAQ;AAAA,MAClB,gBAAgB,OAAO,QAAQ,WAAW,CAAC;AAAA,MAC3C,kBAAkB,OAAO,QAAQ,aAAa,CAAC;AAAA,MAC/C,UAAU,OAAO,QAAQ,YAAY,GAAG;AAAA,MACxC,eAAe,OAAO,QAAQ,iBAAiB,QAAQ,YAAY,GAAG;AAAA,MACtE,QAAQ,QAAQ,WAAW;AAAA,MAC3B,WAAW,YAAoB,QAAQ,SAAS;AAAA,IAAA;AAG5C,UAAA,SAAS,MAAMA,sBAAiC;AAAA,MACpD,KAAK;AAAA,MACL,QAAQ;AAAA,MACR;AAAA,MACA,MAAM;AAAA,MACN,aAAa;AAAA,IAAA,CACd;AAEK,UAAA,WAAW,EAAE,MAAM,GAAG,OAAO,aAAa,OAAO,SAAS,aAAa,QAAS,CAAA;AACtF,YAAO,iCAAQ,YAAW;AAAA,EAC5B;AAEA,iBAAe,mBAAmB,SAAoC;AACpE,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACP,YAAA,IAAI,MAAM,QAAQ;AAAA,IAC1B;AAEA,UAAM,OAAO;AAAA,MACX;AAAA,MACA,UAAU,QAAQ;AAAA,MAClB,SAAS,OAAO,QAAQ,WAAW,CAAC;AAAA,MACpC,WAAW,OAAO,QAAQ,aAAa,CAAC;AAAA,IAAA;AAGpC,UAAA,SAAS,MAAMA,sBAAiC;AAAA,MACpD,KAAK;AAAA,MACL,QAAQ;AAAA,MACR;AAAA,MACA,MAAM;AAAA,MACN,aAAa;AAAA,IAAA,CACd;AAEK,UAAA,WAAW,EAAE,MAAM,aAAa,MAAM,OAAO,aAAa,OAAO,SAAS,aAAa,QAAS,CAAA;AACtG,YAAO,iCAAQ,YAAW;AAAA,EAC5B;AAEA,iBAAe,kBAAkB,SAAmC;AAClE,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACP,YAAA,IAAI,MAAM,QAAQ;AAAA,IAC1B;AAEM,UAAA,SAAS,MAAMA,sBAAiC;AAAA,MACpD,KAAK;AAAA,MACL,QAAQ;AAAA,MACR,MAAM,EAAE,UAAU,UAAU,QAAQ,UAAU,QAAQ,QAAQ,UAAU,GAAG;AAAA,MAC3E,MAAM;AAAA,MACN,aAAa;AAAA,IAAA,CACd;AAEK,UAAA,WAAW,EAAE,MAAM,aAAa,MAAM,OAAO,aAAa,OAAO,SAAS,aAAa,QAAS,CAAA;AACtG,YAAO,iCAAQ,YAAW;AAAA,EAC5B;AAEA,iBAAe,oBAAoB,SAAqC;AACtE,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACP,YAAA,IAAI,MAAM,QAAQ;AAAA,IAC1B;AAEM,UAAA,SAAS,MAAMA,sBAAiC;AAAA,MACpD,KAAK;AAAA,MACL,QAAQ;AAAA,MACR,MAAM,EAAE,UAAU,UAAU,QAAQ,UAAU,aAAa,QAAQ,SAAS;AAAA,MAC5E,MAAM;AAAA,MACN,aAAa;AAAA,IAAA,CACd;AAED,YAAO,iCAAQ,YAAW;AAAA,EAC5B;AAEA,iBAAe,qBAAqB,SAAsC;AACxE,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACP,YAAA,IAAI,MAAM,QAAQ;AAAA,IAC1B;AAEM,UAAA,SAAS,MAAMA,sBAAiC;AAAA,MACpD,KAAK;AAAA,MACL,QAAQ;AAAA,MACR,MAAM,EAAE,UAAU,UAAU,QAAQ,UAAU,WAAW,YAAoB,QAAQ,SAAS,EAAE;AAAA,MAChG,MAAM;AAAA,MACN,aAAa;AAAA,IAAA,CACd;AAED,YAAO,iCAAQ,YAAW;AAAA,EAC5B;AAEA,iBAAe,mBAAmB,UAAkB;AAClD,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACP,YAAA,IAAI,MAAM,QAAQ;AAAA,IAC1B;AAEM,UAAA,WAAW,MAAMA,sBAAqC;AAAA,MAC1D,KAAK;AAAA,MACL,QAAQ;AAAA,MACR,MAAM,EAAE,UAAU,SAAS;AAAA,MAC3B,MAAM;AAAA,MACN,aAAa;AAAA,IAAA,CACd;AAEM,WAAA,YAAoB,qCAAU,SAAS;AAAA,EAChD;AAEe,iBAAA,cAAc,UAA6B,IAAI;AAC5D,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACP,YAAA,IAAI,MAAM,QAAQ;AAAA,IAC1B;AAEA,YAAQ,QAAQ;AACZ,QAAA;AACF,YAAM,UAAmC;AAAA,QACvC;AAAA,QACA,oBAAoB,QAAQ,sBAAsB;AAAA,MAAA;AAGpD,UAAI,QAAQ,UAAU;AACZ,gBAAA,YAAY,CAAC,QAAQ,QAAQ;AAAA,MACvC;AACA,UAAI,QAAQ,QAAQ;AAClB,gBAAQ,SAAS,QAAQ;AAAA,MAC3B;AACA,UAAI,QAAQ,OAAO;AACT,gBAAA,WAAW,CAAC,QAAQ,KAAK;AAAA,MACnC;AACA,UAAI,QAAQ,WAAW;AACrB,gBAAQ,YAAY,QAAQ;AAAA,MAC9B;AACA,UAAI,QAAQ,SAAS;AACnB,gBAAQ,UAAU,QAAQ;AAAA,MAC5B;AAEM,YAAA,WAAW,MAAMA,sBAAoC;AAAA,QACzD,KAAK;AAAA,QACL,QAAQ;AAAA,QACR,MAAM;AAAA,QACN,MAAM;AAAA,QACN,aAAa;AAAA,MAAA,CACd;AAED,YAAM,oBAAuC;AAAA,QAC3C,oBAAoB,QAAQ,sBAAsB;AAAA,QAClD,UAAU,QAAQ;AAAA,QAClB,QAAQ,QAAQ;AAAA,QAChB,OAAO,QAAQ;AAAA,QACf,WAAW,QAAQ;AAAA,QACnB,SAAS,QAAQ;AAAA,MAAA;AAEnB,gBAAU,eAAe;AACf,gBAAA,cAAc,qBAAqB,QAAQ;AACrD,aAAO,UAAU;AAAA,IAAA,UACjB;AACA,cAAQ,QAAQ;AAAA,IAClB;AAAA,EACF;AAEA,WAAS,iBAAiB,aAA0C;AACxD,cAAA,cAAc,EAAE,OAAO,GAAG,OAAO,CAAC,GAAG,aAAa,CAAA,GAAI,aAAa,EAAE;AAC/E,cAAU,eAAe;AAAA,MACvB,qBAAoB,2CAAa,uBAAsB;AAAA,MACvD,UAAU,2CAAa;AAAA,MACvB,QAAQ,2CAAa;AAAA,MACrB,OAAO,2CAAa;AAAA,MACpB,WAAW,2CAAa;AAAA,MACxB,SAAS,2CAAa;AAAA,IAAA;AAAA,EAE1B;AAEe,iBAAA,kBAAkB,QAAQ,KAAK;;AAC5C,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACb,oBAAc,QAAQ;AACtB,aAAO;IACT;AAEA,YAAQ,gBAAgB;AACpB,QAAA;AACI,YAAA,WAAW,MAAMA,sBAA8B;AAAA,QACnD,KAAK,6BAA6B,mBAAmB,KAAK,CAAC;AAAA,QAC3D,QAAQ;AAAA,QACR,MAAM;AAAA,QACN,aAAa;AAAA,MAAA,CACd;AACK,YAAA,QAAQ,YAAiB,qCAAU,KAAK;AAC9C,YAAM,WAAW,MACd,OAAO,CAAC,SAAS,iBAAgB,6BAAM,cAAY,6BAAM,WAAU,QAAQ,CAAC,EAC5E,IAAI,qBAAqB;AAC5B,oBAAc,QAAQ;AAChB,YAAA,YAAY,SAAS,SAAS,MAAI,cAAS,CAAC,MAAV,mBAAa,cAAa,KAAK;AACjE,YAAA,mBAAmB,sBAAsB,SAAS;AACxD,gCAA0B,QAAQ,IAAI,oBAAoB,qBAAqB,MAAM,mBAAmB;AACjG,aAAA;AAAA,IAAA,UACP;AACA,cAAQ,gBAAgB;AAAA,IAC1B;AAAA,EACF;AAEA,WAAS,sBAAsB,UAAmB;AAC1C,UAAA,SAAS,YAAY,iBAAiB;AAC5C,QAAI,CAAC,QAAQ;AACX;AAAA,IACF;AACM,UAAA,SAAS,0BAA0B,MAAM,KAAK;AACpD,QAAI,CAAC,QAAQ;AACX,kCAA4B,QAAQ,EAAE;AACtC;AAAA,IACF;AACA,gCAA4B,QAAQ,MAAM;AAAA,EAC5C;AAEA,iBAAe,wBAAwB;AACrC,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACb,wBAAkB,QAAQ;AAC1B,aAAO;IACT;AAEA,YAAQ,oBAAoB;AACxB,QAAA;AACI,YAAA,WAAW,MAAMA,sBAA8B;AAAA,QACnD,KAAK;AAAA,QACL,QAAQ;AAAA,QACR,MAAM;AAAA,QACN,aAAa;AAAA,MAAA,CACd;AACK,YAAA,QAAQ,YAAiB,qCAAU,KAAK;AAC9C,YAAM,WAAW,MACd,OAAO,CAAC,SAAS,iBAAgB,6BAAM,cAAY,6BAAM,WAAU,QAAQ,CAAC,EAC5E,IAAI,yBAAyB;AAChC,wBAAkB,QAAQ;AACnB,aAAA;AAAA,IAAA,UACP;AACA,cAAQ,oBAAoB;AAAA,IAC9B;AAAA,EACF;AAEA,iBAAe,uBAAuB,SAAwC;AAC5E,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACP,YAAA,IAAI,MAAM,QAAQ;AAAA,IAC1B;AAEA,UAAMA,sBAAiC;AAAA,MACrC,KAAK;AAAA,MACL,QAAQ;AAAA,MACR,MAAM,EAAE,UAAU,OAAO,QAAQ,OAAO,MAAM,QAAQ,MAAM,SAAS,QAAQ,WAAW,GAAG;AAAA,MAC3F,MAAM;AAAA,MACN,aAAa;AAAA,IAAA,CACd;AAED,WAAO,sBAAsB;AAAA,EAC/B;AAEA,iBAAe,wBAAwB,QAAkB;AACvD,UAAM,YAAY;AAClB,UAAM,UAAU,YAAoB,MAAM,EACvC,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC,EACzB,OAAO,CAAC,SAAS,KAAK,SAAS,CAAC;AAE/B,QAAA,CAAC,QAAQ,QAAQ;AACb,YAAA,IAAI,MAAM,WAAW;AAAA,IAC7B;AAEA,UAAMA,sBAAiC;AAAA,MACrC,KAAK;AAAA,MACL,QAAQ;AAAA,MACR,MAAM,EAAE,QAAQ,QAAQ;AAAA,MACxB,MAAM;AAAA,MACN,aAAa;AAAA,IAAA,CACd;AAED,WAAO,sBAAsB;AAAA,EAC/B;AAEe,iBAAA,gBAAgB,UAA6C,IAAI;AAC9E,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACP,YAAA,IAAI,MAAM,QAAQ;AAAA,IAC1B;AACM,UAAA,OAAO,QAAQ,QAAQ;AACvB,UAAA,QAAQ,QAAQ,SAAS;AAE/B,YAAQ,QAAQ;AACZ,QAAA;AACI,YAAA,WAAW,MAAMA,sBAAmC;AAAA,QACxD,KAAK;AAAA,QACL,QAAQ;AAAA,QACR,MAAM,EAAE,MAAM,OAAO,SAAS;AAAA,QAC9B,MAAM;AAAA,QACN,aAAa;AAAA,MAAA,CACd;AACK,YAAA,QAAQ,YAAiC,qCAAU,KAAK;AAClD,kBAAA,QAAQ,MAAM,IAAI,aAAa;AAC3C,gBAAU,QAAQ,QAAO,qCAAU,UAAS,MAAM,UAAU,CAAC;AAAA,IAAA,UAC7D;AACA,cAAQ,QAAQ;AAAA,IAClB;AAAA,EACF;AAEe,iBAAA,iBAAiB,QAAQ,OAAO;AAC7C,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACb,mBAAa,QAAQ;AACrB,gCAA0B,QAAQ;AAClC,aAAO;IACT;AAEI,QAAA,CAAC,SAAS,aAAa,MAAM,SAAS,KAAK,0BAA0B,UAAU,UAAU;AAC3F,aAAO,aAAa;AAAA,IACtB;AAEA,YAAQ,eAAe;AACnB,QAAA;AACI,YAAA,WAAW,MAAMA,sBAA6B;AAAA,QAClD,KAAK,+BAA+B,mBAAmB,QAAQ,CAAC;AAAA,QAChE,QAAQ;AAAA,QACR,MAAM;AAAA,QACN,aAAa;AAAA,MAAA,CACd;AACD,mBAAa,QAAQ,YAAY,QAAQ,EAAE,IAAI,gBAAgB;AAC/D,gCAA0B,QAAQ;AAClC,aAAO,aAAa;AAAA,IAAA,UACpB;AACA,cAAQ,eAAe;AAAA,IACzB;AAAA,EACF;AAEA,iBAAe,mBAAmB;;AAChC,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACb,mBAAa,QAAQ;AACrB;AAAA,IACF;AAEA,YAAQ,OAAO;AACX,QAAA;AACI,YAAA,WAAW,MAAMA,sBAAkC;AAAA,QACvD,KAAK,oCAAoC,mBAAmB,QAAQ,CAAC;AAAA,QACrE,QAAQ;AAAA,QACR,MAAM;AAAA,QACN,aAAa;AAAA,MAAA,CACd;AACK,YAAA,gBAAc,aAAQ,UAAR,mBAAe,aAAY;AAClC,mBAAA,QAAQ,YAAY,QAAQ,EAAE,IAAI,CAAC,iBAAiB,sBAAsB,cAAc,WAAW,CAAC;AAAA,IAAA,UACjH;AACA,cAAQ,OAAO;AAAA,IACjB;AAAA,EACF;AAEA,iBAAe,iBAAiB,gBAAwB;;AACtD,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAC9B,QAAA,CAAC,YAAY,CAAC,gBAAgB;AAChC,aAAO;IACT;AAEA,YAAQ,eAAe;AACnB,QAAA;AACI,YAAA,WAAW,MAAMA,sBAAiC;AAAA,QACtD,KAAK,+BAA+B,mBAAmB,QAAQ,CAAC,mBAAmB,mBAAmB,cAAc,CAAC;AAAA,QACrH,QAAQ;AAAA,QACR,MAAM;AAAA,QACN,aAAa;AAAA,MAAA,CACd;AACK,YAAA,gBAAc,aAAQ,UAAR,mBAAe,aAAY;AAC/C,YAAM,WAAW,mBAAkB,qCAAU,aAAY,CAAA,GAAI,WAAW;AAClE,YAAA,SAAS,aAAa,MAAM,KAAK,CAAC,gBAAgB,YAAY,OAAO,cAAc;AACzF,UAAI,QAAQ;AACV,eAAO,WAAW;AAClB,eAAO,YAAU,0CAAU,iBAAV,mBAAwB,uBAAsB,OAAO;AACtE,eAAO,YAAYjB,WAAAA,iBAAe,0CAAU,iBAAV,mBAAwB,cAAa,OAAO,SAAS;AACvF,eAAO,WAAS,0CAAU,iBAAV,mBAAwB,gBAAe,OAAO;AAAA,MAChE;AACO,aAAA;AAAA,IAAA,UACP;AACA,cAAQ,eAAe;AAAA,IACzB;AAAA,EACF;AAEA,iBAAe,gBAAgB,gBAAwB,SAAiB,UAAkC,CAAA,GAAI;;AAC5G,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAC9B,QAAA,CAAC,YAAY,CAAC,gBAAgB;AACzB,aAAA;AAAA,IACT;AAEM,UAAA,OAAO,QAAQ,QAAQ;AAC7B,UAAM,kBAAkB,WAAW,IAAI,SAAA,EAAW;AAClD,UAAM,WAAW,QAAQ,WAAW,IAAI,SAAA,EAAW;AAE/C,QAAA,SAAS,UAAU,CAAC,gBAAgB;AAC/B,aAAA;AAAA,IACT;AACA,QAAI,SAAS,WAAW,CAAC,QAAQ,aAAa;AACtC,YAAA,IAAI,MAAM,QAAQ;AAAA,IAC1B;AAEA,UAAM,UAAmC;AAAA,MACvC;AAAA,MACA;AAAA,MACA,SAAS,SAAS,UAAU,UAAU;AAAA,IAAA;AAGpC,QAAA,QAAQ,SAAS,QAAQ;AAC3B,cAAQ,cAAc;AAAA,IACxB;AACA,QAAI,QAAQ,aAAa;AACvB,cAAQ,cAAc,QAAQ;AAAA,IAChC;AACA,QAAI,QAAQ,WAAW;AACrB,cAAQ,YAAY,QAAQ;AAAA,IAC9B;AAEM,UAAA,WAAW,MAAMiB,sBAAiC;AAAA,MACtD,KAAK;AAAA,MACL,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,MAAM;AAAA,MACN,aAAa;AAAA,IAAA,CACd;AAEK,UAAA,gBAAc,aAAQ,UAAR,mBAAe,aAAY;AACzC,UAAA,SAAS,aAAa,MAAM,KAAK,CAAC,gBAAgB,YAAY,OAAO,cAAc;AACzF,QAAI,QAAQ;AACV,aAAO,WAAW,mBAAkB,qCAAU,aAAY,CAAA,GAAI,WAAW;AACzE,aAAO,YAAU,0CAAU,iBAAV,mBAAwB,uBAAsB,OAAO;AACtE,aAAO,YAAYjB,WAAAA,iBAAe,0CAAU,iBAAV,mBAAwB,cAAa,OAAO,SAAS;AACvF,aAAO,WAAS,0CAAU,iBAAV,mBAAwB,gBAAe,OAAO;AAAA,IAChE;AAEO,WAAA;AAAA,EACT;AAEe,iBAAA,yBAAyB,YAAoB,SAAiB;;AAC3E,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACP,YAAA,IAAI,MAAM,QAAQ;AAAA,IAC1B;AACA,QAAI,CAAC,YAAY;AACT,YAAA,IAAI,MAAM,SAAS;AAAA,IAC3B;AACI,QAAA,CAAC,QAAQ,QAAQ;AACb,YAAA,IAAI,MAAM,SAAS;AAAA,IAC3B;AAEA,UAAM,UAAU;AAAA,MACd;AAAA,MACA;AAAA,MACA,SAAS,QAAQ,KAAK;AAAA,IAAA;AAGlB,UAAA,WAAW,MAAMiB,sBAAiC;AAAA,MACtD,KAAK;AAAA,MACL,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,MAAM;AAAA,MACN,aAAa;AAAA,IAAA,CACd;AAEK,UAAA,gBAAc,aAAQ,UAAR,mBAAe,aAAY;AAC/C,UAAM,eAAe,sBAAsB,qCAAU,cAAc,WAAW;AAC9E,iBAAa,WAAW,mBAAkB,qCAAU,aAAY,CAAA,GAAI,WAAW;AAEzE,UAAA,gBAAgB,aAAa,MAAM,UAAU,CAAC,SAAS,KAAK,OAAO,aAAa,EAAE;AACxF,QAAI,iBAAiB,GAAG;AACtB,mBAAa,MAAM,OAAO,eAAe,GAAG,YAAY;AAAA,IAAA,OACnD;AACQ,mBAAA,MAAM,QAAQ,YAAY;AAAA,IACzC;AAEO,WAAA;AAAA,EACT;AAEe,iBAAA,wBACb,WACA,SACA,gBACA;;AACA,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACP,YAAA,IAAI,MAAM,QAAQ;AAAA,IAC1B;AAEM,UAAA,OAAO,UAAU;AACvB,QAAI,CAAC,MAAM;AACH,YAAA,IAAI,MAAM,SAAS;AAAA,IAC3B;AAEA,UAAM,kBAAkB,YAAoB,OAAO,EAChD,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC,EACzB,OAAO,CAAC,SAAS,KAAK,SAAS,CAAC;AAE/B,QAAA,CAAC,gBAAgB,QAAQ;AACrB,YAAA,IAAI,MAAM,WAAW;AAAA,IAC7B;AAEM,UAAA,WAAW,MAAMA,sBAAgC;AAAA,MACrD,KAAK;AAAA,MACL,QAAQ;AAAA,MACR,MAAM,EAAE,UAAU,MAAM,cAAc,gBAAgB;AAAA,MACtD,MAAM;AAAA,MACN,aAAa;AAAA,IAAA,CACd;AAEK,UAAA,gBAAc,aAAQ,UAAR,mBAAe,aAAY;AACzC,UAAA,eAAe,sBAAsB,UAAU,WAAW;AAC1D,UAAA,gBAAgB,aAAa,MAAM,UAAU,CAAC,SAAS,KAAK,OAAO,aAAa,EAAE;AACxF,QAAI,iBAAiB,GAAG;AACtB,mBAAa,MAAM,OAAO,eAAe,GAAG,YAAY;AAAA,IAAA,OACnD;AACQ,mBAAA,MAAM,QAAQ,YAAY;AAAA,IACzC;AAEA,SAAI,iDAAgB,cAAW,sDAAgB,YAAhB,mBAAyB,cAAa;AAC/D,UAAA;AACI,cAAA,gBAAgB,aAAa,IAAI,eAAe,WAAW,IAAI,eAAe,WAAW,CAAA,CAAE;AAAA,eAC1F,OAAO;AACdlB,sBAAA,MAAA,MAAA,QAAA,yBAAa,kDAAkD,KAAK;AAAA,MACtE;AAAA,IACF;AAEO,WAAA;AAAA,EACT;AAEA,iBAAe,kBAAkB,gBAAwB;;AACvD,UAAM,YAAY;AAClB,UAAM,WAAW,iBAAiB;AAClC,QAAI,CAAC,UAAU;AACP,YAAA,IAAI,MAAM,QAAQ;AAAA,IAC1B;AACA,QAAI,CAAC,gBAAgB;AACb,YAAA,IAAI,MAAM,OAAO;AAAA,IACzB;AAEM,UAAA,WAAW,MAAMkB,sBAAiC;AAAA,MACtD,KAAK,+BAA+B,mBAAmB,QAAQ,CAAC,mBAAmB,mBAAmB,cAAc,CAAC;AAAA,MACrH,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,aAAa;AAAA,IAAA,CACd;AAEK,UAAA,gBAAc,aAAQ,UAAR,mBAAe,aAAY;AACzC,UAAA,SAAS,aAAa,MAAM,KAAK,CAAC,gBAAgB,YAAY,OAAO,cAAc;AACzF,QAAI,QAAQ;AACV,aAAO,WAAW,mBAAkB,qCAAU,aAAY,CAAA,GAAI,WAAW;AACzE,aAAO,YAAU,0CAAU,iBAAV,mBAAwB,uBAAsB,OAAO;AACtE,aAAO,YAAYjB,WAAAA,iBAAe,0CAAU,iBAAV,mBAAwB,cAAa,OAAO,SAAS;AACvF,aAAO,WAAS,0CAAU,iBAAV,mBAAwB,gBAAe,OAAO;AAAA,IAChE;AAEA,UAAM,eAAe,qCAAU;AACzB,UAAA,eAAe,YAAoB,6CAAc,YAAY;AACnE,UAAM,SAAQ,6CAAc,YACxB,6CAAc,cAAa,OAC3B,aAAa,KAAK,CAAC,SAAS,QAAQ,SAAS,WAAW,KAAK,aAAa,CAAC,KAAK;AAEpF,UAAM,QAAkB,CAAA;AAClB,UAAA,KAAK,MAAM,KAAK,EAAE;AACxB,UAAM,KAAK,MAAM,aAAa,KAAK,GAAG,CAAC,EAAE;AACnC,UAAA,KAAK,QAAQA,2BAAe,oBAAI,QAAO,YAAA,CAAa,CAAC,EAAE;AAC7D,UAAM,KAAK,EAAE;AAEb,gBAA4B,qCAAU,QAAQ,EAAE,QAAQ,CAAC,YAAY;AAC7D,YAAA,YAAYA,WAAAA,eAAe,QAAQ,SAAS;AAC5C,YAAA,SAAS,QAAQ,WAAW,cAAc,GAAG,QAAQ,MAAM,QAAQ,QAAQ;AAC3E,YAAA,UAAU,QAAQ,SAAS,UAAU,QAAQ,QAAQ,OAAO,KAAK,QAAQ;AACzE,YAAA,KAAK,IAAI,SAAS,KAAK,MAAM,KAAK,OAAO,GAAG,KAAM,CAAA;AACxD,UAAI,QAAQ,SAAS;AACnB,cAAM,KAAK,QAAQ,QAAQ,OAAO,EAAE;AAAA,MACtC;AAAA,IAAA,CACD;AAED,UAAM,WAAW,GAAG,SAAS,MAAM,IAAI,KAAK,KAAK;AAC1C,WAAA;AAAA,MACL;AAAA,MACA,SAAS,MAAM,KAAK,IAAI;AAAA,IAAA;AAAA,EAE5B;AAEe,iBAAA,iBACb,SACA,SACA;AACA,YAAQ,eAAe;AACnB,QAAA;AACF,UAAI,CAAC,SAAS;AACZ,qBAAa,QAAQ;AACd,eAAA;AAAA,MACT;AACA,UAAI,CAAC,WAAW,CAAC,QAAQ,UAAU;AAC3B,cAAA,IAAI,MAAM,gBAAgB;AAAA,MAClC;AACI,UAAA,CAAC,QAAQ,cAAc;AACnB,cAAA,IAAI,MAAM,gBAAgB;AAAA,MAClC;AACM,YAAA,WAAW,MAAMiB,sBAAmC;AAAA,QACxD,KAAK;AAAA,QACL,QAAQ;AAAA,QACR,MAAM;AAAA,UACJ;AAAA,UACA,UAAU,QAAQ;AAAA,UAClB,cAAc,QAAQ;AAAA,UACtB,cAAc,QAAQ;AAAA,QACxB;AAAA,QACA,aAAa;AAAA,QACb,WAAW;AAAA,QACX,MAAM;AAAA,MAAA,CACP;AACY,mBAAA,QAAQ,yBAAyB,QAAQ;AACtD,aAAO,aAAa;AAAA,IAAA,UACpB;AACA,cAAQ,eAAe;AAAA,IACzB;AAAA,EACF;AAEO,SAAA;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EAAA;AAEJ,CAAC;;"}
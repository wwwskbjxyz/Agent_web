{"version":3,"file":"env.js","sources":["utils/env.ts"],"sourcesContent":["// utils/env.ts\r\nconst STORAGE_KEY = 'SProtect:apiBaseUrl';\r\nconst STORAGE_VERSION_KEY = 'SProtect:apiBaseUrl:version';\r\nconst STORAGE_VERSION = '2';\r\nconst DEFAULT_BASE_URL = 'https://chen.roccloudiot.cn:5001';\r\n\r\n/**\r\n * 规范化 URL\r\n */\r\nfunction normalizeBaseUrl(value?: string | null): string | undefined {\r\n  if (!value) return undefined;\r\n\r\n  const trimmed = value.trim();\r\n  if (!trimmed) return undefined;\r\n\r\n  const lower = trimmed.toLowerCase();\r\n  if (lower === 'mock' || lower.startsWith('mock://')) {\r\n    return trimmed;\r\n  }\r\n\r\n  // 如果是完整 URL\r\n  if (/^[a-z][a-z0-9+.-]*:\\/\\//i.test(trimmed)) {\r\n    return trimmed;\r\n  }\r\n\r\n  return `http://${trimmed}`;\r\n}\r\n\r\n/**\r\n * 安全读取环境变量，兼容 H5 / App / 小程序 / Node\r\n */\r\nfunction readEnv(key: string): string | undefined {\r\n  try {\r\n    // ✅ 1. Vite (H5) 环境\r\n    const metaObj = (globalThis as any)?.import?.meta;\r\n    if (metaObj && metaObj.env && metaObj.env[key]) {\r\n      return metaObj.env[key] as string;\r\n    }\r\n  } catch (_) {\r\n    // App 端无 import.meta，直接跳过\r\n  }\r\n\r\n  try {\r\n    // ✅ 2. Node / process 环境\r\n    if (typeof process !== 'undefined' && process.env) {\r\n      const value = (process.env as Record<string, string | undefined>)[key];\r\n      if (value) return value;\r\n    }\r\n  } catch (_) {}\r\n\r\n  try {\r\n    // ✅ 3. App / 小程序环境\r\n    if (typeof uni !== 'undefined' && typeof uni.getStorageSync === 'function') {\r\n      const val = uni.getStorageSync(key);\r\n      if (val) return val;\r\n    }\r\n  } catch (_) {}\r\n\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * 获取当前接口地址\r\n */\r\nexport function resolveApiBaseUrl(): string {\r\n  try {\r\n    ensureStorageVersion();\r\n    if (typeof uni !== 'undefined' && typeof uni.getStorageSync === 'function') {\r\n      const stored = normalizeBaseUrl(uni.getStorageSync(STORAGE_KEY));\r\n      if (stored) return stored;\r\n    }\r\n  } catch (error) {\r\n    console.warn('读取自定义 API 地址失败', error);\r\n  }\r\n\r\n  const runtimeConfig = (globalThis as any)?.__SPROTECT_RUNTIME_CONFIG__;\r\n  const globalValue =\r\n    normalizeBaseUrl(runtimeConfig?.apiBaseUrl) ||\r\n    normalizeBaseUrl((globalThis as any)?.__SPROTECT_API_BASE_URL__);\r\n\r\n  if (globalValue) {\r\n    return globalValue;\r\n  }\r\n\r\n  const envValue =\r\n    normalizeBaseUrl(readEnv('VITE_API_BASE_URL')) ||\r\n    normalizeBaseUrl(readEnv('API_BASE_URL'));\r\n\r\n  if (envValue) {\r\n    return envValue;\r\n  }\r\n\r\n  return DEFAULT_BASE_URL;\r\n}\r\n\r\n/**\r\n * 更新接口地址\r\n */\r\nexport function updateApiBaseUrl(url?: string) {\r\n  const normalized = normalizeBaseUrl(url);\r\n\r\n  try {\r\n    if (\r\n      typeof uni === 'undefined' ||\r\n      typeof uni.removeStorageSync !== 'function' ||\r\n      typeof uni.setStorageSync !== 'function'\r\n    ) {\r\n      return;\r\n    }\r\n    if (!normalized) {\r\n      uni.removeStorageSync(STORAGE_VERSION_KEY);\r\n    } else {\r\n      uni.setStorageSync(STORAGE_VERSION_KEY, STORAGE_VERSION);\r\n    }\r\n    if (!normalized) {\r\n      uni.removeStorageSync(STORAGE_KEY);\r\n      return;\r\n    }\r\n    uni.setStorageSync(STORAGE_KEY, normalized);\r\n  } catch (err) {\r\n    console.warn('更新接口地址失败', err);\r\n  }\r\n}\r\n\r\n/**\r\n * 判断是否为 mock 模式\r\n */\r\nexport function isMockMode(baseUrl: string): boolean {\r\n  if (!baseUrl) return true;\r\n  const normalized = baseUrl.toLowerCase();\r\n  return normalized === 'mock' || normalized.startsWith('mock://');\r\n}\r\n\r\n/**\r\n * 获取存储键名\r\n */\r\nexport function getApiBaseStorageKey() {\r\n  return STORAGE_KEY;\r\n}\r\n\r\nfunction ensureStorageVersion() {\r\n  try {\r\n    if (typeof uni === 'undefined' || typeof uni.getStorageSync !== 'function') {\r\n      return;\r\n    }\r\n    const current = uni.getStorageSync(STORAGE_VERSION_KEY);\r\n    if (current !== STORAGE_VERSION) {\r\n      uni.removeStorageSync(STORAGE_KEY);\r\n      if (STORAGE_VERSION) {\r\n        uni.setStorageSync(STORAGE_VERSION_KEY, STORAGE_VERSION);\r\n      }\r\n    }\r\n  } catch (_) {}\r\n}\r\n"],"names":["uni"],"mappings":";;AACA,MAAM,cAAc;AACpB,MAAM,sBAAsB;AAC5B,MAAM,kBAAkB;AACxB,MAAM,mBAAmB;AAKzB,SAAS,iBAAiB,OAA2C;AACnE,MAAI,CAAC;AAAc,WAAA;AAEb,QAAA,UAAU,MAAM;AACtB,MAAI,CAAC;AAAgB,WAAA;AAEf,QAAA,QAAQ,QAAQ;AACtB,MAAI,UAAU,UAAU,MAAM,WAAW,SAAS,GAAG;AAC5C,WAAA;AAAA,EACT;AAGI,MAAA,2BAA2B,KAAK,OAAO,GAAG;AACrC,WAAA;AAAA,EACT;AAEA,SAAO,UAAU,OAAO;AAC1B;AAKA,SAAS,QAAQ,KAAiC;;AAC5C,MAAA;AAEI,UAAA,WAAW,8CAAoB,WAApB,mBAA4B;AAC7C,QAAI,WAAW,QAAQ,OAAO,QAAQ,IAAI,GAAG,GAAG;AACvC,aAAA,QAAQ,IAAI,GAAG;AAAA,IACxB;AAAA,WACO,GAAG;AAAA,EAEZ;AAEI,MAAA;AAEF,QAAI,OAAO,YAAY,eAAe,QAAQ,KAAK;AAC3C,YAAA,QAAS,QAAQ,IAA2C,GAAG;AACjE,UAAA;AAAc,eAAA;AAAA,IACpB;AAAA,WACO,GAAG;AAAA,EAAC;AAET,MAAA;AAEF,QAAI,OAAOA,cAAQ,UAAA,eAAe,OAAOA,cAAAA,MAAI,mBAAmB,YAAY;AACpE,YAAA,MAAMA,cAAAA,MAAI,eAAe,GAAG;AAC9B,UAAA;AAAY,eAAA;AAAA,IAClB;AAAA,WACO,GAAG;AAAA,EAAC;AAEN,SAAA;AACT;AAKO,SAAS,oBAA4B;AACtC,MAAA;AACmB;AACrB,QAAI,OAAOA,cAAQ,UAAA,eAAe,OAAOA,cAAAA,MAAI,mBAAmB,YAAY;AAC1E,YAAM,SAAS,iBAAiBA,cAAAA,MAAI,eAAe,WAAW,CAAC;AAC3D,UAAA;AAAe,eAAA;AAAA,IACrB;AAAA,WACO,OAAO;AACdA,kBAAA,MAAA,MAAA,QAAA,sBAAa,kBAAkB,KAAK;AAAA,EACtC;AAEA,QAAM,gBAAiB,yCAAoB;AAC3C,QAAM,cACJ,iBAAiB,+CAAe,UAAU,KAC1C,iBAAkB,yCAAoB,yBAAyB;AAEjE,MAAI,aAAa;AACR,WAAA;AAAA,EACT;AAEM,QAAA,WACJ,iBAAiB,QAAQ,mBAAmB,CAAC,KAC7C,iBAAiB,QAAQ,cAAc,CAAC;AAE1C,MAAI,UAAU;AACL,WAAA;AAAA,EACT;AAEO,SAAA;AACT;AAkCO,SAAS,WAAW,SAA0B;AACnD,MAAI,CAAC;AAAgB,WAAA;AACf,QAAA,aAAa,QAAQ;AAC3B,SAAO,eAAe,UAAU,WAAW,WAAW,SAAS;AACjE;AASA,SAAS,uBAAuB;AAC1B,MAAA;AACF,QAAI,OAAOA,cAAQ,UAAA,eAAe,OAAOA,cAAAA,MAAI,mBAAmB,YAAY;AAC1E;AAAA,IACF;AACM,UAAA,UAAUA,cAAAA,MAAI,eAAe,mBAAmB;AACtD,QAAI,YAAY,iBAAiB;AAC/BA,0BAAI,kBAAkB,WAAW;AACjC,UAAI,iBAAiB;AACfA,sBAAAA,MAAA,eAAe,qBAAqB,eAAe;AAAA,MACzD;AAAA,IACF;AAAA,WACO,GAAG;AAAA,EAAC;AACf;;;"}
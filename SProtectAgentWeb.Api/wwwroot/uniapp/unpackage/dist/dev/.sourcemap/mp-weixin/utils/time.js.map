{"version":3,"file":"time.js","sources":["utils/time.ts"],"sourcesContent":["function resolveTimestamp(value?: number | string | Date | null): number | null {\r\n  if (value == null) {\r\n    return null;\r\n  }\r\n\r\n  if (value instanceof Date) {\r\n    const ms = value.getTime();\r\n    return Number.isNaN(ms) ? null : ms;\r\n  }\r\n\r\n  if (typeof value === 'number') {\r\n    if (!Number.isFinite(value) || value <= 0) {\r\n      return null;\r\n    }\r\n    return value > 1e12 ? value : value * 1000;\r\n  }\r\n\r\n  if (typeof value === 'string') {\r\n    const trimmed = value.trim();\r\n    if (!trimmed) {\r\n      return null;\r\n    }\r\n\r\n    const numeric = Number(trimmed);\r\n    if (Number.isFinite(numeric)) {\r\n      return resolveTimestamp(numeric);\r\n    }\r\n\r\n    const parsed = Date.parse(trimmed);\r\n    if (Number.isNaN(parsed)) {\r\n      return null;\r\n    }\r\n    return parsed;\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nexport function formatDateTime(value?: number | string | Date | null, fallback = '-'): string {\r\n  const timestamp = resolveTimestamp(value);\r\n  if (timestamp == null) {\r\n    return fallback;\r\n  }\r\n\r\n  const date = new Date(timestamp);\r\n  if (Number.isNaN(date.getTime())) {\r\n    return fallback;\r\n  }\r\n\r\n  const pad = (input: number) => input.toString().padStart(2, '0');\r\n  const year = date.getFullYear();\r\n  const month = pad(date.getMonth() + 1);\r\n  const day = pad(date.getDate());\r\n  const hour = pad(date.getHours());\r\n  const minute = pad(date.getMinutes());\r\n  const second = pad(date.getSeconds());\r\n\r\n  return `${year}-${month}-${day} ${hour}:${minute}:${second}`;\r\n}\r\n\r\nexport function formatDate(value?: number | string | Date | null, fallback = '-'): string {\r\n  const timestamp = resolveTimestamp(value);\r\n  if (timestamp == null) {\r\n    return fallback;\r\n  }\r\n  const date = new Date(timestamp);\r\n  if (Number.isNaN(date.getTime())) {\r\n    return fallback;\r\n  }\r\n  const pad = (input: number) => input.toString().padStart(2, '0');\r\n  return `${date.getFullYear()}-${pad(date.getMonth() + 1)}-${pad(date.getDate())}`;\r\n}\r\n\r\nexport function formatTime(value?: number | string | Date | null, fallback = '-'): string {\r\n  const timestamp = resolveTimestamp(value);\r\n  if (timestamp == null) {\r\n    return fallback;\r\n  }\r\n  const date = new Date(timestamp);\r\n  if (Number.isNaN(date.getTime())) {\r\n    return fallback;\r\n  }\r\n  const pad = (input: number) => input.toString().padStart(2, '0');\r\n  return `${pad(date.getHours())}:${pad(date.getMinutes())}`;\r\n}\r\n\r\nexport function formatRelativeHours(hours?: number | string | null): string {\r\n  if (hours == null) {\r\n    return '-';\r\n  }\r\n  const numeric = Number(hours);\r\n  if (!Number.isFinite(numeric)) {\r\n    return '-';\r\n  }\r\n  if (numeric <= 24) {\r\n    return `${numeric.toFixed(1)} 小时`;\r\n  }\r\n  return `${(numeric / 24).toFixed(1)} 天`;\r\n}\r\n\r\nexport function parseUnixSeconds(value?: number | string | null): number | null {\r\n  if (value == null) {\r\n    return null;\r\n  }\r\n  const numeric = Number(value);\r\n  if (!Number.isFinite(numeric) || numeric <= 0) {\r\n    return null;\r\n  }\r\n  return numeric * 1000;\r\n}\r\n\r\nexport function isSameDay(a?: number | string | Date | null, b?: number | string | Date | null): boolean {\r\n  const tsA = resolveTimestamp(a);\r\n  const tsB = resolveTimestamp(b);\r\n  if (tsA == null || tsB == null) {\r\n    return false;\r\n  }\r\n  const dateA = new Date(tsA);\r\n  const dateB = new Date(tsB);\r\n  return (\r\n    dateA.getFullYear() === dateB.getFullYear() &&\r\n    dateA.getMonth() === dateB.getMonth() &&\r\n    dateA.getDate() === dateB.getDate()\r\n  );\r\n}\r\n\r\nexport function toUnixSeconds(value: number | string | Date | null | undefined): number | null {\r\n  const timestamp = resolveTimestamp(value);\r\n  if (timestamp == null) {\r\n    return null;\r\n  }\r\n  return Math.floor(timestamp / 1000);\r\n}\r\n\r\nexport function formatDurationFromSeconds(value?: number | string | null): string {\r\n  if (value == null) {\r\n    return '';\r\n  }\r\n\r\n  const totalSeconds = Number(value);\r\n  if (!Number.isFinite(totalSeconds) || totalSeconds <= 0) {\r\n    return '';\r\n  }\r\n\r\n  const seconds = Math.floor(totalSeconds);\r\n  const units: string[] = [];\r\n\r\n  const days = Math.floor(seconds / 86400);\r\n  const hours = Math.floor((seconds % 86400) / 3600);\r\n  const minutes = Math.floor((seconds % 3600) / 60);\r\n  const remainSeconds = seconds % 60;\r\n\r\n  if (days > 0) {\r\n    units.push(`${days}天`);\r\n  }\r\n  if (hours > 0) {\r\n    units.push(`${hours}小时`);\r\n  }\r\n  if (minutes > 0 && units.length < 2) {\r\n    units.push(`${minutes}分钟`);\r\n  }\r\n\r\n  if (!units.length) {\r\n    if (minutes > 0) {\r\n      units.push(`${minutes}分钟`);\r\n    } else if (remainSeconds > 0) {\r\n      units.push(`${remainSeconds}秒`);\r\n    }\r\n  }\r\n\r\n  if (units.length === 1 && remainSeconds > 0 && units[0].includes('分钟') && remainSeconds >= 30) {\r\n    units[0] = `${units[0]}${remainSeconds}秒`;\r\n  }\r\n\r\n  if (units.length === 0) {\r\n    return `${remainSeconds}秒`;\r\n  }\r\n\r\n  return units.join('');\r\n}\r\n"],"names":[],"mappings":"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"}